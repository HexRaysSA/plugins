[
  {
    "projectUrl": "https://github.com/eset/ipyida",
    "description": "IPython console integration for IDA Pro",
    "longdescription": "README.md not found"
  },
  {
    "projectUrl": "https://github.com/gaasedelen/lucid",
    "description": "An Interactive Hex-Rays Microcode Explorer",
    "longdescription": "# Lucid - An Interactive Hex-Rays Microcode Explorer\n\n<p align=\"center\">\n<img alt=\"Lucid Plugin\" src=\"screenshots/lucid_demo.gif\"/>\n</p>\n\n## Overview\n\nLucid is a developer-oriented [IDA Pro](https://www.hex-rays.com/products/ida/) plugin for exploring the Hex-Rays microcode. It was designed to provide a seamless, interactive experience for studying microcode transformations in the decompiler pipeline.\n\nThis plugin is labeled only as a prototype & code resource for the community. Please note that it is a development aid, not a general purpose reverse engineering tool. \n\nSpecial thanks to [genmc](https://github.com/patois/genmc) / [@pat0is](https://twitter.com/pat0is) et al. for the inspiration.\n\n## Releases\n\n* v0.1 -- Initial release\n\n## Installation\n\nLucid is a cross-platform (Windows, macOS, Linux) Python 2/3 plugin. It takes zero third party dependencies, making the code both portable and easy to install.\n\n1. From your disassembler's python console, run the following command to find its plugin directory:\n   - **IDA Pro**: `os.path.join(idaapi.get_user_idadir(), \"plugins\")`\n\n2. Copy the contents of this repository's `/plugins/` folder to the listed directory.\n3. Restart your disassembler.\n\nThis plugin is only supported for IDA 7.5 and newer.\n\n## Usage\n\nLucid will automatically load for any architecture with a Hex-Rays decompiler present. Simply right click anywhere in a Pseudocode window and select `View microcode` to open the Lucid Microcode Explorer.\n\n<p align=\"center\">\n<img alt=\"View microcode\" src=\"screenshots/lucid_view_microcode.gif\"/>\n</p>\n\nBy default, the Microcode Explorer will synchronize with the active Hex-Rays Pseudocode window.\n\n## Lucid Layers\n\nLucid makes it effortless to trace microinstructions through the entire decompiler pipeline. Simply select a microinstruction, and *scroll* (or click... if you must) through the microcode maturity layer list.\n\n<p align=\"center\">\n<img alt=\"Lucid Layer Traversal Demo\" src=\"screenshots/lucid_layers.gif\"/>\n</p>\n\nWatch as the explorer stays focused on your selected instruction, while the surrounding microcode landscape melts away. It's basically magic.\n\n## Sub-instruction Granularity\n\nCursor tracing can operate at a sub-operand / sub-instruction level. Placing your cursor on different parts of the same microinstruction can trace sub-components back to their respective origins.\n\n<p align=\"center\">\n<img alt=\"Lucid Sub-instruction Granularity Demo\" src=\"screenshots/lucid_granularity.gif\"/>\n</p>\n\nIf the instructions at the traced address get optimized away, Lucid will attempt to keep your cursor in the same approximate context. It will change the cursor color from green to red to indicate the loss of precision.\n\n## Sub-instruction Trees\n\nAs the Hex-Rays microcode increases in maturity, the decompilation pipeline begins to nest microcode as sub-instructions and sub-operands that form tree-based structures. \n\n<p align=\"center\">\n<img alt=\"Lucid Sub-instrution Graph Demo\" src=\"screenshots/lucid_subtree.gif\"/>\n</p>\n\nYou can view these individual trees by right clicking an instruction and selecting `View subtree`.\n\n## Known Bugs\n\nAs this is the initial release, there will probably a number of small quirks and bugs. Here are a few known issues at the time of release:\n\n* While sync'd with hexrays, cursor mapping can get wonky if focused on microcode that gets optimized away\n* When opening the Sub-instruction Graph, window/tab focus can change unexpectedly\n* Microcode Explorer does not dock to the top-level far right compartment on Linux?\n* Switching between multiple Pseudocode windows in different functions might cause problems\n* Double clicking an instruction address comment can crash IDA if there is no suitable view to jump to\n* Plugin has not been tested robustly on Mac / Linux\n* ...?\n\nIf you encounter any crashes or bad behavior, please file an issue.\n\n## Future Work\n\nTime and motivation permitting, future work may include:\n\n* Clean up the code.......\n* Interactive sub-instruction graph generalization (to pattern_t / rules)\n* Microcode optimizer development workflow?\n* Microcode optimization manager?\n* Ctree explorer (and similar graph generalization stuff...)\n* Microcode hint text?\n* Improve layer translations\n* Improve performance\n* Migrate off IDA codeview?\n* ...?\n\nI welcome external contributions, issues, and feature requests. Please make any pull requests to the `develop` branch of this repository if you would like them to be considered for a future release.\n\n## Authors\n\n* Markus Gaasedelen ([@gaasedelen](https://twitter.com/gaasedelen))\n"
  },
  {
    "projectUrl": "https://github.com/gaasedelen/patching",
    "description": "An Interactive Binary Patching Plugin for IDA Pro",
    "longdescription": "# Patching - Interactive Binary Patching for IDA Pro\n\n<p align=\"center\"><img alt=\"Patching Plugin\" src=\"screenshots/title.png\"/></p>\n\n## Overview\n\nPatching assembly code to change the behavior of an existing program is not uncommon in malware analysis, software reverse engineering, and broader domains of security research. This project extends the popular [IDA Pro](https://www.hex-rays.com/products/ida/) disassembler to create a more robust interactive binary patching workflow designed for rapid iteration.\n\nThis project is currently powered by a minor [fork](https://github.com/gaasedelen/keystone) of the ubiquitous [Keystone Engine](https://github.com/keystone-engine/keystone), supporting x86/x64 and Arm/Arm64 patching with plans to enable the remaining Keystone architectures in a future release.\n\nSpecial thanks to [Hex-Rays](https://hex-rays.com/) for supporting the development of this plugin.\n\n## Releases\n\n* v0.1 -- Initial release\n\n# Installation\n\nThis plugin requires IDA 7.6 and Python 3. It supports Windows, Linux, and macOS.\n\n## Easy Install\n\nRun the following line in the IDA console to automatically install the plugin:\n\n### Windows / Linux\n\n```python\nimport urllib.request as r; exec(r.urlopen('https://github.com/gaasedelen/patching/raw/main/install.py').read())\n```\n\n### macOS\n\n```python\nimport urllib.request as r; exec(r.urlopen('https://github.com/gaasedelen/patching/raw/main/install.py', cafile='/etc/ssl/cert.pem').read())\n```\n\n## Manual Install\n\nAlternatively, the plugin can be manually installed by downloading the distributable plugin package for your respective platform from the [releases](https://github.com/gaasedelen/patching/releases) page and unzipping it to your plugins folder.\n\nIt is __*strongly*__ recommended you install this plugin into IDA's user plugin directory:\n\n```python\nimport ida_diskio, os; print(os.path.join(ida_diskio.get_user_idadir(), \"plugins\"))\n```\n\n# Usage\n\nThe patching plugin will automatically load for supported architectures (x86/x64/Arm/Arm64) and inject relevant patching actions into the right click context menu of the IDA disassembly views:\n\n<p align=\"center\"><img alt=\"Patching plugin right click context menu\" src=\"screenshots/usage.gif\"/></p>\n\nA complete listing of the contextual patching actions are described in the following sections.\n\n## Assemble\n\nThe main patching dialog can be launched via the Assemble action in the right click context menu. It simulates a basic IDA disassembly view that can be used to edit one or several instructions in rapid succession.\n\n<p align=\"center\"><img alt=\"The interactive patching dialog\" src=\"screenshots/assemble.gif\"/></p>\n\nThe assembly line is an editable field that can be used to modify instructions in real-time. Pressing enter will commit (patch) the entered instruction into the database.\n\nYour current location (a.k.a your cursor) will always be highlighted in green. Instructions that will be clobbered as a result of your patch / edit will be highlighted in red prior to committing the patch.\n\n<p align=\"center\"><img alt=\"Additional instructions that will be clobbered by a patch show up as red\" src=\"screenshots/clobber.png\"/></p>\n\nFinally, the `UP` and `DOWN` arrow keys can be used while still focused on the editable assembly text field to quickly move the cursor up and down the disassembly view without using the mouse.\n\n## NOP\n\nThe most common patching action is to NOP out one or more instructions. For this reason, the NOP action will always be visible in the right click menu for quick access.\n\n<p align=\"center\"><img alt=\"Right click NOP instruction\" src=\"screenshots/nop.gif\"/></p>\n\nIndividual instructions can be NOP'ed, as well as a selected range of instructions.\n\n## Force Conditional Jump\n\nForcing a conditional jump to always execute a 'good' path is another common patching action. The plugin will only show this action when right clicking a conditional jump instruction.\n\n<p align=\"center\"><img alt=\"Forcing a conditional jump\" src=\"screenshots/forcejump.gif\"/></p>\n\nIf you *never* want a conditional jump to be taken, you can just NOP it instead!\n\n## Save & Quick Apply\n\nPatches can be saved (applied) to a selected executable via the patching submenu at any time. The quick-apply action makes it even faster to save subsequent patches using the same settings. \n\n<p align=\"center\"><img alt=\"Applying patches to the original executable\" src=\"screenshots/save.gif\"/></p>\n\nThe plugin will also make an active effort to retain a backup (`.bak`) of the original executable which it uses to 'cleanly' apply the current set of database patches during each save. \n\n## Revert Patch\n\nFinally, if you are ever unhappy with a patch you can simply right click patched (yellow) blocks of instructions to revert them to their original value.\n\n<p align=\"center\"><img alt=\"Reverting patches\" src=\"screenshots/revert.gif\"/></p>\n\nWhile it is 'easy' to revert bytes back to their original value, it can be 'hard' to restore analysis to its previous state. Reverting a patch may *occasionally* require additional human fixups. \n\n# Known Bugs\n\n* Further improve ARM / ARM64 / THUMB correctness\n* Define 'better' behavior for cpp::like::symbols(...) / IDBs (very sketchy right now)\n* Adding / Updating / Modifying / Showing / Warning about Relocation Entries??\n* Handle renamed registers (like against dwarf annotated idb)?\n* A number of new instructions (circa 2017 and later) are not supported by Keystone\n* A few problematic instruction encodings by Keystone\n\n# Future Work\n\nTime and motivation permitting, future work may include:\n\n* Enable the remaining major architectures supported by Keystone:\n  * PPC32 / PPC64 / MIPS32 / MIPS64 / SPARC / SystemZ\n* Multi instruction assembly (eg. `xor eax, eax; ret;`)\n* Multi line assembly (eg. shellcode / asm labels)\n* Interactive byte / data / string editing\n* Symbol hinting / auto-complete / fuzzy-matching\n* Syntax highlighting the editable assembly line\n* Better hinting of errors, syntax issues, etc\n* NOP / Force Jump from Hex-Rays view (sounds easy, but probably pretty hard!)\n* radio button toggle between 'pretty print' mode vs 'raw' mode? or display both?\n  ```\n  Pretty:  mov     [rsp+48h+dwCreationDisposition], 3\n     Raw:  mov     [rsp+20h], 3\n  ```\n\nI welcome external contributions, issues, and feature requests. Please make any pull requests to the `develop` branch of this repository if you would like them to be considered for a future release.\n\n# Authors\n\n* Markus Gaasedelen ([@gaasedelen](https://twitter.com/gaasedelen))\n"
  },
  {
    "projectUrl": "https://github.com/keystone-engine/keypatch",
    "description": "Multi-architecture assembler for IDA Pro. Powered by Keystone Engine.",
    "longdescription": "Keypatch\n========\n\nKeypatch is [the award winning plugin](https://www.hex-rays.com/contests/2016/index.shtml) of [IDA Pro](https://www.hex-rays.com/products/ida/) for [Keystone Assembler Engine](http://keystone-engine.org).\n\nKeypatch consists of 3 tools inside.\n\n- **Patcher** & **Fill Range**: these allow you to type in assembly to directly patch your binary.\n- **Search**: this interactive tool let you search for assembly instructions in binary.\n\nSee [this quick tutorial](TUTORIAL.md) for how to use Keypatch, and [this slides](Keypatch-slides.pdf) for how it is implemented.\n\nKeypatch is confirmed to work on IDA Pro version 6.4, 6.5, 6.6, 6.8, 6.9, 6.95, 7.0, 7.5 but should work flawlessly on older versions.\nIf you find any issues, please [report](http://keystone-engine.org/contact).\n\n--------------------\n\n### 1. Why Keypatch?\n\nSometimes we want to patch the binary while analyzing it in IDA, but unfortunately the built-in asssembler of IDA Pro is not adequate.\n\n- This tool is not friendly and without many options that would make the life of reverser easier.\n- Only X86 assembler is available. Support for all other architectures is totally missing.\n- The X86 assembler is not in a good shape, either: it cannot understand many modern Intel instructions.\n\nKeypatch was developed to solve this problem. Thanks to the power of [Keystone](http://keystone-engine.org), our plugin offers some nice features.\n\n- Cross-architecture: support Arm, Arm64 (AArch64/Armv8), Hexagon, Mips, PowerPC, Sparc, SystemZ & X86 (include 16/32/64bit).\n- Cross-platform: work everywhere that IDA works, which is on Windows, MacOS, Linux.\n- Based on Python, so it is easy to install as no compilation is needed.\n- User-friendly: automatically add comments to patched code, and allow reverting (undo) modification.\n- Open source under GPL v2.\n\nKeypatch can be the missing piece in your toolset of reverse engineering.\n\n--------------\n\n### 2. Install\n\n- Install Keystone core & Python binding for Python 2.7 from [keystone-engine.org/download](http://keystone-engine.org/download). Or follow the steps in the [appendix section](#appendix-install-keystone-for-ida-pro).\n- Install Six module from pip because it is used by the keypatch.py: `pip install six`.\n- Copy file `keypatch.py` to IDA Plugin folder, then restart IDA Pro to use Keypatch.\n    - On Windows, the folder is at `C:\\Program Files (x86)\\IDA 6.9\\plugins`\n    - On MacOS, the folder is at `/Applications/IDA\\ Pro\\ 6.9/idaq.app/Contents/MacOS/plugins`\n    - On Linux, the folder may be at `/opt/IDA/plugins/`\n\n`NOTE`\n- On Windows, if you get an error message from IDA about \"fail to load the dynamic library\", then your machine may miss the VC++ runtime library. Fix that by downloading & installing it from https://www.microsoft.com/en-gb/download/details.aspx?id=40784\n- On other \\*nix platforms, the above error message means you do not have 32-bit Keystone installed yet. See [appendix section](#appendix-install-keystone-for-ida-pro) below for more instructions to fix this.\n\n\n------------\n\n### 3. Usage\n\n- For a quick tutorial, see [TUTORIAL.md](TUTORIAL.md). For a complete description of all of the features of Keypatch, keep reading.\n\n- To patch your binary, press hotkey `CTRL+ALT+K` inside IDA to open **Keypatch Patcher** dialog.\n    - The original assembly, encode & instruction size will be displayed in 3 controls at the top part of the form.\n    - Choose the syntax, type new assembly instruction in the `Assembly` box (you can use IDA symbols).\n    - Keypatch would *automatically* update the encoding in the `Encode` box while you are typing, without waiting for `ENTER` keystroke.\n        - Note that you can type IDA symbols, and the raw assembly will be displayed in the `Fixup` control.\n    - Press `ENTER` or click `Patch` to overwrite the current instruction with the new code, then *automatically* advance to the the next instruction.\n        - Note that when size of the new code is different from the original code, Keypatch can pad until the next instruction boundary with NOPs opcode, so the code flow is intact. Uncheck the choice `NOPs padding until next instruction boundary` if this is undesired.\n        - By default, Keypatch appends the modified instruction with the information of the original code (before being patched). Uncheck the choice `Save original instructions in IDA comment` to disable this feature.\n    - By default, the modification you made is only recorded in the IDA database. To apply these changes to the original binary (thus overwrite it), choose menu `Edit | Patch program | Apply patches to input file`.\n<p align=\"center\">\n<img src=\"screenshots/keypatch_patcher.png\" height=\"460\" />\n</p>\n\n- To fill a range of code with an instruction, select the range, then either press hotkey `CTRL+ALT+K`, or choose menu `Edit | Keypatch | Fill Range`.\n    - In the `Assembly` box, you can either enter assembly code, or raw hexcode. Some examples of acceptable raw hexcode are `90`, `aa bb`, `0xAA, 0xBB`.\n<p align=\"center\">\n<img src=\"screenshots/keypatch_fillrange.png\" height=\"460\" />\n</p>\n\n- To revert (undo) the last patching, choose menu `Edit | Keypatch | Undo last patching`.\n\n- To search for assembly instructions (without overwritting binary), open **Keypatch Search** from menu `Edit | Keypatch | Search`.\n    - Choose the architecture, address, endian mode & syntax, then type assembly instructions in the `Assembly` box.\n    - Keypatch would *automatically* update the encoding in the `Encode` box while you are typing, without waiting for `ENTER` keystroke.\n    - When you click `Search` button, Keypatch would look for all the occurences of the instructions, and show the result in a new form.\n\n<p align=\"center\">\n<img src=\"screenshots/keypatch_search.png\" height=\"360\" />\n</p>\n\n- To check for new version of Keypatch, choose menu `Edit | Keypatch | Check for update`.\n\n- At any time, you can also access to all the above Keypatch functionalities just by right-click in IDA screen, and choose from the popup menu.\n\n<p align=\"center\">\n<img src=\"screenshots/keypatch_menupopup.png\" height=\"300\" />\n</p>\n\n--------------\n\n### 4. Contact\n\nEmail keystone.engine@gmail.com for any questions.\n\nFor future update of Keypatch, follow our Twitter [@keystone_engine](https://twitter.com/keystone_engine) for announcement.\n\n----\n\n### Appendix. Install Keystone for IDA Pro\n\nWe all know that before IDA 7.0, IDA Pro's Python is 32-bit itself, so it can only loads 32-bit libraries. For this reason, we have to build & install Keystone 32-bit. However, since IDA 7.0 supports both 32-bit & 64-bit, which means we also need to install a correct version of Keystone. Simply install from Pypi, with `pip` (32-bit), like followings:\n\n```shell\npip install keystone-engine\n```\n\nDone? Now go back to [section 2](#2-install) & install Keypatch for IDA Pro. Enjoy!\n"
  },
  {
    "projectUrl": "https://github.com/igogo-x86",
    "description": "igogo-x86 - Overview",
    "longdescription": "README.md not found"
  },
  {
    "projectUrl": "https://github.com/joxeankoret/diaphora",
    "description": "Diaphora, the most advanced Free and Open Source program diffing tool.",
    "longdescription": "# δiaphora\n\n<p align='center'>\n<img src=\"https://github.com/joxeankoret/diaphora/assets/2945834/3f1e9cf4-98d7-4d9a-b7d3-0a7354053b4e\" width=\"10%\">\n</p>\n\nDiaphora (διαφορά, Greek for 'difference') version 3.1.2 is the most advanced program diffing tool (working as an IDA plugin) available as of today (2024). It was released first during SyScan 2015 and has been actively maintained ever since: Diaphora has been ported to every single minor version of IDA since 6.8 to 8.4.\n\nDiaphora supports versions of IDA >= 7.4 because the code only runs in Python 3.X (Python 3.11 was the last version being tested).\n\n## Unique Features\n\nDiaphora has many of the most common program diffing (bindiffing) features you might expect, like:\n\n * Diffing assembler.\n * Diffing control flow graphs.\n * Porting symbol names and comments.\n * Adding manual matches.\n * Similarity ratio calculation.\n * Batch automation.\n * Call graph matching calculation.\n * Dozens of heuristics based on graph theory, assembler, bytes, functions' features, etc...\n\nHowever, Diaphora has also many features that are unique, not available in any other public tool. The following is a non extensive list of unique features:\n\n * Ability to port structs, enums, unions and typedefs.\n * Potentially fixed vulnerabilities detection for patch diffing sessions.\n * Support for compilation units (finding and diffing compilation units).\n * Microcode support.\n * Parallel diffing.\n * Pseudo-code based heuristics.\n * Pseudo-code patches generation.\n * Diffing pseudo-codes (with syntax highlighting!).\n * Scripting support (for both the exporting and diffing processes).\n * ...\n\n## Installation\n\nDiaphora requires no installation: just download the code and run the script `diaphora.py` from within IDA or on the command line (only for diffing already exported databases). However, it can be integrated as a [plugin](https://github.com/joxeankoret/diaphora/tree/master/plugin) into IDA by doing the following:\n\n * Copy `plugins/diaphora_plugin.py` and `plugins/diaphora_plugin.cfg` to the IDA's plugins directory.\n * Edit `diaphora_plugin.cfg` and set the path value to the Diaphora's directory.\n\n## Donations\n\nYou can help (or thank) the author of Diaphora by making a donation. If you feel like doing so you can use one of the following links:\n\n * [![Liberapay](https://img.shields.io/liberapay/receives/diaphora.svg?logo=liberapay)](https://liberapay.com/Diaphora/donate)\n * [![Donate](https://img.shields.io/badge/Donate-PayPal-green.svg)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=68Z4H8SE7N64L)\n\n## Support\n\nFeel free to open issues in Github if you have any problem or need help. If you prefer to chat interactivelly, you can use the following Discord channel: https://discord.gg/atg34w2xjV\n\n## Licensing\n\nVersions of Diaphora prior to 1.2.4, including version 1.2.4, were licensed under the [GNU GPL version 3](https://www.gnu.org/licenses/gpl-3.0.html). Since version 2.0, Diaphora is now licensed under the [GNU Affero GPL version 3 license](https://www.gnu.org/licenses/agpl-3.0.html). The license has been changed so companies wanting to modify and adapt Diaphora cannot offer web services based on these modified versions without contributing back the changes.\n\nFor 99.99% of users, the license change doesn't affect them at all. If your company needs a different licensing model, check the next section...\n\n## Commercial Support and Consultancy\n\nCommercial support and consultancy is offered for legal companies. If you need support or consultancy for problems you have with your target, to develop products based on Diaphora, to use Diaphora internally interacting with your own tools, for plagiarism detection projects, etc... you can contact me at admin@joxeankoret.com for more details.\n\n## Licensing problems\n\nIf your company does not allow using the AGPL license, you can get commercial licenses of Diaphora to use it in your company, or to use it as a particular in any company you work (similar concept as IDA's named licenses). For more details, please contact me at admin@joxeankoret.com.\n\n## Wiki\n\nIf you are looking to how to automate the export or diffing process, or you want to speed operations, etc... You might want to take a look to the [wiki](https://github.com/joxeankoret/diaphora/wiki) where such questions are answered.\n\n## Screenshots\n\nDiaphora finding the exact function where a vulnerability was patched in CVE-2020-1350:\n\n![CVE-2020-1350](https://files.mastodon.social/media_attachments/files/110/313/141/968/158/099/original/607189c509ec1cc4.png)\n\nDiaphora, again, finding the exact function where CVE-2023-28231 was fixed:\n\n![CVE-2023-28231](https://files.mastodon.social/media_attachments/files/110/313/148/945/529/051/original/28e032f21be414a3.png)\n\nCVE-2023-28231. As explained in a blog from ZDI, the vulnerability was fixed by checking that the number of relay forward messages in \"ProcessRelayForwardMessage()\" is not bigger or equal than 32 (0x20), as shown in the following pseudo-code diffing:\n\n![CVE-2023-28231](https://files.mastodon.social/media_attachments/files/110/300/368/934/189/808/original/fe3392db2b8234e9.png)\n\nDiaphora doing Hex-Ray's microcode diffing:\n\n![Diffing microcode in a graph](https://files.mastodon.social/media_attachments/files/110/157/157/910/926/533/original/6c5975e15c378cb5.png)\n\nDiffing assembly, pseudo-code and microcode:\n\n![Assembly, pseudo-code and microcode](https://files.mastodon.social/media_attachments/files/110/102/237/646/074/440/original/4a816df5069691c3.png)\n\nDiffing CVE-2023-21768 with Diaphora 3.0:\n\n![Diffing CVE-2023-21768 with #Diaphora 3.0](https://files.mastodon.social/media_attachments/files/110/066/930/153/215/408/original/86b06ae90d57d5a1.png)\n\nThis is a screenshot of Diaphora diffing the PEGASUS iOS kernel Vulnerability fixed in iOS 9.3.5:\n\n![Diffing iOS 9.3.5 diff](http://sektioneins.de/images/diaphora1.png)\n\nAnd this is an old screenshot of Diaphora diffing the [Microsoft bulletin MS15-034](https://technet.microsoft.com/en-us/library/security/ms15-034.aspx):\n\n![Diaphora diffing MS15-034](https://pbs.twimg.com/media/CCnruP_W0AA8ksc.png:large)\n\nThese are some screenshots of Diaphora diffing the [Microsoft bulletin MS15-050]( https://technet.microsoft.com/en-us/library/security/ms15-050.aspx), extracted from the blog post [Analyzing MS15-050 With Diaphora](http://www.alex-ionescu.com/?p=271) from Alex Ionescu.\n\n![Diaphora diffing MS15-050, best matches](http://www.alex-ionescu.com/wp-content/uploads/diaphora2.png)\n![Diaphora diffing MS15-050, partial matches](http://www.alex-ionescu.com/wp-content/uploads/diaphora3.png)\n![Diaphora diffing MS15-050, diffing pseudo-code](http://www.alex-ionescu.com/wp-content/uploads/diaphora1.png)\n\n![Diaphora diffing a LuaBot, matches and pseudo-code](https://1.bp.blogspot.com/-O5UjSOyjCgg/V5byA-ozXVI/AAAAAAAABaY/yRTMDTSD9zI0mSy4AsHN21ZYf_YvctnkwCLcB/s1600/evs-compile.png)\n\n\nHere is a screenshot of Diaphora diffing [iBoot from iOS 10.3.3 against iOS 11.0](https://blog.matteyeux.com/hacking/2018/04/04/diaphora-diff-and-ida.html):\n\n![Diaphora diffing iBoot from iOS 10.3.3 against iOS 11.0](https://blog.matteyeux.com/images/newgraph.PNG)\n"
  },
  {
    "projectUrl": "https://github.com/google/bindiff",
    "description": "Quickly find differences and similarities in disassembled code",
    "longdescription": "![BinDiff Logo](docs/images/bindiff-lockup-vertical.png)\n\nCopyright 2011-2024 Google LLC.\n\n# BinDiff\n\nThis repository contains the BinDiff source code. BinDiff is an open-source\ncomparison tool for binary files to quickly find differences and similarities\nin disassembled code.\n\n## Table of Contents\n\n- [About BinDiff](#about-bindiff)\n- [Quickstart](#quickstart)\n- [Documentation](#documentation)\n- [Codemap](#codemap)\n- [Building from Source](#building-from-source)\n- [License](#license)\n- [Getting Involved](#getting-involved)\n\n## About BinDiff\n\nBinDiff is an open-source comparison tool for binary files, that assists\nvulnerability researchers and engineers to quickly find differences and\nsimilarities in disassembled code.\n\nWith BinDiff, researchers can identify and isolate fixes for vulnerabilities in\nvendor-supplied patches. It can also be used to port symbols and comments\nbetween disassemblies of multiple versions of the same binary. This makes\ntracking changes over time easier and allows organizations to retain analysis\nresults and enables knowledge transfer among binary analysts.\n\n### Use Cases\n\n* Compare binary files for x86, MIPS, ARM, PowerPC, and other architectures\n  supported by popular [disassemblers](docs/disassemblers.md).\n* Identify identical and similar functions in different binaries\n* Port function names, comments and local names from one disassembly to the\n  other\n* Detect and highlight changes between two variants of the same function\n\n## Quickstart\n\nIf you want to just get started using BinDiff, download prebuilt installation\npackages from the\n[releases page](https://github.com/google/bindiff/releases).\n\nNote: BinDiff relies on a separate disassembler. Out of the box, it ships with\nsupport for IDA Pro, Binary Ninja and Ghidra. The [disassemblers page](docs/disassemblers.md) lists the supported configurations.\n\n## Documentation\n\nA subset of the existing [manual](https://www.zynamics.com/bindiff/manual) is\navailable in the [`docs/` directory](docs/README.md).\n\n## Codemap\n\nBinDiff contains the following components:\n\n* [`cmake`](cmake) - CMake build files declaring external dependencies\n* [`fixtures`](fixtures) - A collection of test files to exercise the BinDiff\n  core engine\n* [`ida`](ida) - Integration with the IDA Pro disassembler\n* [`java`](java) - Java source code. This contains the the BinDiff visual diff\n  user interface and its corresponding utility library.\n* [`match`](match) - Matching algorithms for the BinDiff core engine\n* [`packaging`](packaging) - Package sources for the installation packages\n* [`tools`](tools) - Helper executables that are shipped with the product\n\n## Building from Source\n\nThe instruction below should be enough to build both the native code and the\nJava based components.\n\nMore detailed build instructions will be added at a later date. This includes\nready-made `Dockerfile`s and scripts for building the installation packages.\n\n### Native code\n\nBinDiff uses CMake to generate its build files for those components that consist\nof native C++ code.\n\nThe following build dependencies are required:\n\n*   [BinExport](https://github.com/google/binexport) 12, the companion plugin\n    to BinDiff that also contains a lot of shared code\n*   Boost 1.83.0 or higher (a partial copy of 1.83.0 ships with BinExport and\n    will be used automatically)\n*   [CMake](https://cmake.org/download/) 3.14 or higher\n*   [Ninja](https://ninja-build.org/) for speedy builds\n*   GCC 9 or a recent version of Clang on Linux/macOS. On Windows, use the\n    Visual Studio 2019 compiler and the Windows SDK for Windows 10.\n*   Git 1.8 or higher\n*   Dependencies that will be downloaded:\n    *   Abseil, GoogleTest, Protocol Buffers (3.14), and SQLite3\n    *   Binary Ninja SDK\n\nThe following build dependencies are optional:\n*   IDA Pro only: IDA SDK 8.2 or higher (unpack into `deps/idasdk`)\n\nThe general build steps are the same on Windows, Linux and macOS. The following\nshows the commands for Linux.\n\nDownload dependencies that won't be downloaded automatically:\n\n```bash\nmkdir -p build/out\ngit clone https://github.com/google/binexport build/binexport\nunzip -q <path/to/idasdk_pro80.zip> -d build/idasdk\n```\n\nNext, configure the build directory and generate build files:\n\n```bash\ncmake -S . -B build/out -G Ninja \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DCMAKE_INSTALL_PREFIX=build/out \\\n  -DBINDIFF_BINEXPORT_DIR=build/binexport \\\n  \"-DIdaSdk_ROOT_DIR=${PWD}build/idasdk\"\n```\n\nFinally, invoke the actual build. Binaries will be placed in\n`build/out/bindiff-prefix`:\n\n```bash\ncmake --build build/out --config Release\n(cd build/out; ctest --build-config Release --output-on-failure)\ncmake --install build/out --config Release\n```\n\n### Building without IDA\n\nTo build without IDA, simply change the above configuration step to\n\n```bash\ncmake -S . -B build/out -G Ninja \\\n  -DCMAKE_BUILD_TYPE=Release \\\n  -DCMAKE_INSTALL_PREFIX=build/out \\\n  -DBINDIFF_BINEXPORT_DIR=build/binexport \\\n  -DBINEXPORT_ENABLE_IDAPRO=OFF\n```\n\n### Java GUI and yFiles\n\nBuilding the Java based GUI requires the commercial third-party graph\nvisualisation library [yFiles](https://www.yworks.com/products/yfiles) for graph\ndisplay and layout. This library is immensely powerful, and not easily\nreplaceable.\n\nTo build, BinDiff uses Gradle 6.x and Java 11 LTS. Refer to its\n[installation guide](https://docs.gradle.org/6.8.3/userguide/installation.html)\nfor instructions on how to install.\n\nAssuming you are a yFiles license holder, set the `YFILES_DIR` environment\nvariable to a directory containing the yFiles `y.jar` and `ysvg.jar`.\n\nNote: BinDiff still uses the older 2.x branch of yFiles.\n\nThen invoke Gradle to download external dependencies and build:\n\nWindows:\n```\nset YFILES_DIR=<path\\to\\yfiles_2.17>\ncd java\ngradle shadowJar\n```\n\nLinux or macOS:\n\n```\nexport YFILES_DIR=<path/to/yfiles_2.17>\ncd java\ngradle shadowJar\n```\n\nAfterwards the directory `ui/build/libs` in the `java` sub-directory should\ncontain the self-contained `bindiff-ui-all.jar` artifact, which can be run\nusing the standard `java -jar` command.\n\n## Further reading / Similar tools\n\nThe original papers outlining the general ideas behind BinDiff:\n\n* Thomas Dullien and Rolf Rolles. *Graph-Based Comparison of Executable\n  Objects*. [bindiffsstic05-1.pdf](docs/papers/bindiffsstic05-1.pdf).\n  SSTIC ’05, Symposium sur la Sécurité des Technologies de l’Information et des\n  Communications. 2005.\n* Halvar Flake. *Structural Comparison of Executable Objects*.\n  [dimva_paper2.pdf](docs/papers/dimva_paper2.pdf). pp 161-173. Detection of\n  Intrusions and Malware & Vulnerability Assessment. 2004.3-88579-375-X.\n\nOther tools in the same problem space:\n\n* [Diaphora](https://github.com/joxeankoret/diaphora), an advanced program\n  diffing tool implementing many of the same ideas.\n* [TurboDiff](https://www.coresecurity.com/core-labs/open-source-tools/turbodiff-cs), a now-defunct program diffing plugin for IDA Pro.\n\nProjects using BinDiff:\n\n* [VxSig](https://github.com/google/vxsig), a tool to automatically generate\n  AV byte signatures from sets of similar binaries.\n\n## License\n\nBinDiff is licensed under the terms of the Apache license. See\n[LICENSE](LICENSE) for more information.\n\n## Getting Involved\n\nIf you want to contribute, please read [CONTRIBUTING.md](CONTRIBUTING.md)\nbefore sending pull requests. You can also report bugs or file feature\nrequests.\n"
  },
  {
    "projectUrl": "https://github.com/gaasedelen/lighthouse",
    "description": "A Coverage Explorer for Reverse Engineers",
    "longdescription": "# Lighthouse - A Coverage Explorer for Reverse Engineers\n\n<p align=\"center\">\n<img alt=\"Lighthouse Plugin\" src=\"screenshots/overview.gif\"/>\n</p>\n\n## Overview\n\nLighthouse is a powerful code coverage explorer for [IDA Pro](https://www.hex-rays.com/products/ida/) and [Binary Ninja](https://binary.ninja/), providing software researchers with uniquely interactive controls to study execution maps for native applications without requiring symbols or source.\n\nThis project placed 2nd in IDA's [2017 Plug-In Contest](https://hex-rays.com/contests_details/contest2017/) and was later [nominated](https://pwnies.com/lighthouse/) in the 2021 Pwnie Awards for its contributions to the security research industry.\n\nSpecial thanks to [@0vercl0k](https://twitter.com/0vercl0k) for the inspiration.\n\n## Releases\n\n* v0.9 -- Python 3 support, custom coverage formats, coverage cross-refs, theming subsystem, much more.\n* v0.8 -- Binary Ninja support, HTML coverage reports, consistent styling, many tweaks, bugfixes.\n* v0.7 -- Frida, C++ demangling, context menu, function prefixing, tweaks, bugfixes.\n* v0.6 -- Intel pintool, cyclomatic complexity, batch load, bugfixes.\n* v0.5 -- Search, IDA 7 support, many improvements, stability.\n* v0.4 -- Most compute is now asynchronous, bugfixes.\n* v0.3 -- Coverage composition, interactive composing shell.\n* v0.2 -- Multifile support, performance improvements, bugfixes.\n* v0.1 -- Initial release\n\n# Installation\n\nLighthouse is a cross-platform (Windows, macOS, Linux) Python 2/3 plugin. It takes zero third party dependencies, making the code both portable and easy to install.\n\nUse the instructions below for your respective disassembler.\n\n## IDA Installation\n\n1. From IDA's Python console, run the following command to find its plugin directory:\n    - `import idaapi, os; print(os.path.join(idaapi.get_user_idadir(), \"plugins\"))`\n2. Copy the contents of this repository's `/plugins/` folder to the listed directory.\n3. Restart your disassembler.\n\n## Binary Ninja Installation\n\nLighthouse can be installed through the plugin manager on Binary Ninja, supporting v3.5 and newer.\n\n1. Open Binary Ninja's plugin manager by navigating the following submenus:\n    - `Edit` -> `Preferences` -> `Manage Plugins`\n2. Search for Lighthouse in the plugin manager, and click the `Enable` button in the bottom right.\n3. Restart your disassembler.\n\n# Usage\n\nOnce properly installed, there will be a few new menu entries available in the disassembler. These are the entry points for a user to load coverage data and start using Lighthouse.\n\n<p align=\"center\">\n<img alt=\"Lighthouse Menu Entries\" src=\"screenshots/open.gif\"/>\n</p>\n\nLighthouse is able to load a few different 'flavors' of coverage data. To generate coverage data that can be loaded into Lighthouse, please look at the [README](https://github.com/gaasedelen/lighthouse/tree/master/coverage) in the coverage directory of this repository.\n\n## Coverage Painting\n\nWhile Lighthouse is in use, it will 'paint' the active coverage data across all of the code viewers available in the disassembler. Specifically, this will apply to your linear disassembly, graph, and decompiler windows.\n\n<p align=\"center\">\n<img alt=\"Lighthouse Coverage Painting\" src=\"screenshots/painting.png\"/>\n</p>\n\nIn Binary Ninja, only the linear disassembly, graph, and IL views are supported. Support for painting decompiler output in Binary Ninja will be added to Lighthouse in the *near future* as the feature stabilizes.\n\n# Coverage Overview\n\nThe Coverage Overview is a dockable widget that will open up once coverage has been loaded into Lighthouse. \n\n<p align=\"center\">\n<img alt=\"Lighthouse Coverage Overview\" src=\"screenshots/overview.png\"/>\n</p>\n\nThis interactive widget provides a function level view of the loaded coverage data. It also houses a number of tools to manage loaded data and drive more advanced forms of coverage analysis. \n\n## Context Menu\n\nRight clicking the table in the Coverage Overview will produce a context menu with a few basic amenities to extract information from the table, or manipulate the database as part of your reverse engineering process.\n\n<p align=\"center\">\n<img alt=\"Lighthouse Context Menu\" src=\"screenshots/context_menu.gif\"/>\n</p>\n\nIf there are any other actions that you think might be useful to add to this context menu, please file an issue and they will be considered for a future release of Lighthouse.\n\n## Coverage ComboBox\n\nLoaded coverage and user constructed compositions can be selected or deleted through the coverage combobox.\n\n<p align=\"center\">\n<img alt=\"Lighthouse Coverage ComboBox\" src=\"screenshots/combobox.gif\"/>\n</p>\n\n## HTML Coverage Report\n\nLighthouse can generate rudimentary HTML coverage reports. A sample report can be seen [here](https://rawgit.com/gaasedelen/lighthouse/master/testcase/report.html).\n\n<p align=\"center\">\n<img alt=\"Lighthouse HTML Report\" src=\"screenshots/html_report.gif\"/>\n</p>\n\n# Coverage Shell\n\nAt the bottom of the coverage overview window is the coverage shell. This shell can be used to perform logic-based operations that combine or manipulate the loaded coverage sets.\n\n<p align=\"center\">\n<img alt=\"Lighthouse Coverage Composition\" src=\"screenshots/shell.gif\"/>\n</p>\n\nThis feature is extremely useful in exploring the relationships of program execution across multiple runs. In other words, the shell can be used to 'diff' execution between coverage sets and extract a deeper meaning that is otherwise obscured within the noise of their individual parts.\n\n## Composition Syntax\n\nCoverage composition, or _Composing_ as demonstrated above is achieved through a simple expression grammar and 'shorthand' coverage symbols (A to Z) on the composing shell. \n\n### Grammar Tokens\n* Logical Operators: `|, &, ^, -`\n* Coverage Symbol: `A, B, C, ..., Z, *`\n* Parenthesis: `(...)`\n\n### Example Compositions\n\n1. Executed code that is *shared* between coverage `A` and coverage `B`:\n```\nA & B\n```\n\n2. Executed code that is *unique* only to coverage `A`:\n```\nA - B\n```\n\n3. Executed code that is *unique* to `A` or `B`, but not `C`:\n```\n(A | B) - C\n```\n\nExpressions can be of arbitrary length or complexity, but the evaluation of the composition may occur right to left. So parenthesis are suggested for potentially ambiguous expressions.\n\n## Hot Shell\n\nAdditionally, there is a 'Hot Shell' mode that asynchronously evaluates and caches user compositions in real-time.\n\n<p align=\"center\">\n<img alt=\"Lighthouse Hot Shell\" src=\"screenshots/hot_shell.gif\"/>\n</p>\n\nThe hot shell serves as a natural gateway into the unguided exploration of composed relationships.\n\n## Search\n\nUsing the shell, you can search and filter the functions listed in the coverage table by prefixing their query with `/`.\n\n<p align=\"center\">\n<img alt=\"Lighthouse Search\" src=\"screenshots/search.gif\"/>\n</p>\n\nThe head of the shell will show an updated coverage % computed only from the remaining functions. This is useful when analyzing  coverage for specific function families.\n\n## Jump\n\nEntering an address or function name into the shell can be used to jump to corresponding function entries in the table.\n\n<p align=\"center\">\n<img alt=\"Lighthouse Jump\" src=\"screenshots/jump.gif\"/>\n</p>\n\n# Coverage Cross-references (Xref)\n\nWhile using Lighthouse, you can right click any basic block (or instruction) and use the 'Coverage Xref' action to see which coverage sets executed the selected block. Double clicking any of the listed entries will instantly switch to that coverage set.\n\n<p align=\"center\">\n<img alt=\"Lighthouse Xref\" src=\"screenshots/xref.gif\"/>\n</p>\n\nThis pairs well with the 'Coverage Batch' feature, which allows you to quickly load and aggregate thousands of coverage files into Lighthouse. Cross-referencing a block and selecting a 'set' will load the 'guilty' set from disk as a new coverage set for you to explore separate from the batch.\n\n# Themes\n\nLighthouse ships with two default themes -- a 'light' theme, and a 'dark' one. Depending on the colors currently used by your disassembler, Lighthouse will attempt to select the theme that seems most appropriate.\n\n<p align=\"center\">\n<img alt=\"Lighthouse Themes\" src=\"screenshots/themes.png\"/>\n</p>\n\nThe theme files are stored as simple JSON on disk and are highly configurable. If you are not happy with the default themes or colors, you can create your own themes and simply drop them in the user theme directory.\n\nLighthouse will remember your theme preference for future loads and uses.\n\n# Future Work\n\nTime and motivation permitting, future work may include:\n\n* Nag Vector35 to fix HLIL highlighting ([bug](https://github.com/Vector35/binaryninja-api/issues/2584)) in Binary Ninja\n* ~~Asynchronous composition, painting, metadata collection~~\n* ~~Multifile/coverage support~~\n* Profiling based heatmaps/painting\n* Coverage & profiling treemaps\n* ~~Additional coverage sources, trace formats, etc~~\n* Improved pseudocode painting\n* ~~Lighthouse console access~~, headless usage\n* ~~Custom themes~~\n* ~~Python 3 support~~\n\nI welcome external contributions, issues, and feature requests. Please make any pull requests to the `develop` branch of this repository if you would like them to be considered for a future release.\n\n# Authors\n\n* Markus Gaasedelen ([@gaasedelen](https://twitter.com/gaasedelen))\n"
  },
  {
    "projectUrl": "https://github.com/bootleg/ret-sync",
    "description": "ret-sync is a set of plugins that helps to synchronize a debugging session (WinDbg/GDB/LLDB/OllyDbg2/x64dbg) with IDA/Ghidra/Binary Ninja disassemblers.",
    "longdescription": "# ret-sync\n\n**ret-sync** stands for Reverse-Engineering Tools SYNChronization. It is a set\nof plugins that help to synchronize a debugging session\n(WinDbg/GDB/LLDB/OllyDbg/OllyDbg2/x64dbg) with a disassembler (IDA/Ghidra/Binary Ninja).\nThe underlying idea is simple: take the best from both worlds (static and\ndynamic analysis).\n\nDebuggers and dynamic analysis provide us with:\n\n* local view, with live dynamic context (registers, memory, *etc.*)\n* built-in specialized features/API (ex: WinDbg's ``!peb``, ``!drvobj``,\n``!address``, *etc.*)\n\nDisassemblers and static analysis provide us with:\n\n* macro view over modules\n* code analysis, signatures, types, *etc.*\n* fancy graph view\n* decompilation\n* persistent storage of knowledge within IDBs/GPRs\n\nKey features:\n\n* synchronize graph and decompilation views with debugger's state\n* no need to deal with ASLR, addresses are rebased on-the-fly\n* pass data (comment, command output) from debugger to disassembler\n* multiple IDBs/GPRs can be synced at the same time allowing to easily trace\n  through multiple modules\n* disassembler and debugger can be on different hosts / VMs\n\n**ret-sync** is a fork of [qb-sync](https://github.com/quarkslab/qb-sync)\nthat I developed and maintained during my stay at\n[Quarkslab](http://www.quarkslab.com).\n\n\n-------------------------------------------------------------------------------\n# Table of contents\n\n- [Repository content](#repository-content)\n- [General prerequisites](#general-prerequisites)\n- [Binary release](#binary-release)\n- [**ret-sync** configuration](#ret-sync-configuration)\n- [Installation](#installation)\n  - [IDA extension](#ida-extension)\n  - [Ghidra extension](#ghidra-extension)\n  - [Binary Ninja extension](#binary-ninja-extension)\n  - [WinDbg extension](#windbg-extension)\n  - [GNU gdb (GDB) installation](#gnu-gdb-gdb-installation)\n  - [LLDB installation](#lldb-installation)\n  - [OllyDbg 1.10 installation](#ollydbg-110-installation)\n  - [OllyDbg2 installation](#ollydbg2-installation)\n  - [x64dbg installation](#x64dbg-installation)\n- [Usage](#usage)\n  - [**ret-sync** debugger commands](#ret-sync-debugger-commands)\n  - [IDA usage](#ida-usage)\n  - [Ghidra usage](#ghidra-usage)\n  - [Binary Ninja usage](#binary-ninja-usage)\n  - [WinDbg usage](#windbg-usage)\n  - [GNU gdb (GDB) usage](#gnu-gdb-gdb-usage)\n  - [LLDB usage](#lldb-usage)\n  - [OllyDbg 1.10 usage](#ollydbg-110-usage)\n  - [OllyDbg2 usage](#ollydbg2-usage)\n  - [x64dbg usage](#x64dbg-usage)\n  - [Python library usage](#python-library-usage)\n- [Extend](#extend)\n- [TODO](#todo)\n- [Known Bugs/Limitations](#known-bugslimitations)\n- [License](#license)\n- [Greetz](#greetz)\n-------------------------------------------------------------------------------\n\n# Repository content\n\nThe debugger plugins:\n\n* `ext_windbg/sync`: WinDbg extension source files, once built: `sync.dll`\n* `ext_gdb/sync.py`: GDB plugin\n* `ext_lldb/sync.py`: LLDB plugin\n* `ext_olly1`: OllyDbg 1.10 plugin\n* `ext_olly2`: OllyDbg v2 plugin\n* `ext_x64dbg`: x64dbg plugin\n\nThe disassembler plugins:\n\n* `ext_ida/SyncPlugin.py`\n* `ext_ghidra/dist/ghidra_*_retsync.zip`: Ghidra plugin\n* `ext_bn/retsync`: Binary Ninja plugin\n\n\nAnd the library plugin:\n\n* `ext_lib/sync.py`: standalone Python library\n\n\n# General prerequisites\n\nIDA and GDB plugins require a valid Python setup. Python 2 (>=2.7) and Python\n3 are supported.\n\n\n# Binary release\n\nPre-built binaries for WinDbg/OllyDbg/OllyDbg2/x64dbg debuggers are proposed\nthrough an ``Azure DevOps`` pipeline: [![Build Status](https://dev.azure.com/bootlegdev/ret-sync-release/_apis/build/status/ret-sync-release-CI?branchName=master)](https://dev.azure.com/bootlegdev/ret-sync-release/_build/latest/ret-sync-release-CI?definitionId=8?branchName=master)\n\nSelect the last build and check the artifacts under the ``Related`` section: ``6 published``.\n\n![](img/pipeline.png)\n\n\nA pre-built plugin archive of the Ghidra plugin is provided in `ext_ghidra/dist`.\n\n\n# **ret-sync** configuration\n\n**ret-sync** should work out of the box for most users with a typical setup:\ndebugger and disassembler(s) on the same host, module names matching.\n\nStill, in some scenarios a specific configuration may be used. For that,\nextensions and plugins check for an optional global configuration file named\n`.sync` in the user's home directory. It must be a valid ``.INI`` file.\n\nAdditionally, the IDA and Ghidra plugins also look for the configuration file\nin the IDB or project directory (`<project>.rep`) first to allow local,\nper-IDB/project, settings. If a local configuration file is present, the\nglobal configuration file is ignored.\n\nValues declared in these configuration files override default values. Please\nnote, that **no** `.sync` file is created by default.\n\nBelow we detail, three common scenarios where a configuration file is\nuseful/needed:\n\n* Remote debugging\n* Modules names mismatch\n* Missing PID\n\n\n## Remote debugging: debugger and disassembler are on different hosts\n\nThe ``[INTERFACE]`` section is used to customize network related settings.\nLet's suppose one wants to synchronize IDA with a debugger running inside a\nvirtual machine (or simply another host), common remote kernel debugging\nscenario.\n\nSimply create two ``.sync`` file:\n\n* one on the machine where IDA is installed, in the IDB directory:\n* For Ghidra, place at home directory, ex. \"/home/user\" or \"C:\\Users\\user\".\n```\n[INTERFACE]\nhost=192.168.128.1\nport=9234\n```\n\nIt tells **ret-sync** ``IDA`` plugin to listen on the interface\n``192.168.128.1`` with port ``9234``. It goes without saying that this\ninterface must be reachable from the remote host or virtual machine.\n\n* one on the machine where the debugger is executed, in the user's home directory:\n\n```\n[INTERFACE]\nhost=192.168.128.1\nport=9234\n```\n\nIt tells **ret-sync** debugger plugin to connect to the **ret-sync** ``IDA``\nplugin configured previously to listen in this interface.\n\n\n***NOTE:*** You must specify a real IP here, and not use `0.0.0.0`. This is\nbecause the variable is used by multiple sources both for binding and\nconnecting, so using `0.0.0.0` will result in weird errors.\n\n\n\n## IDB and debugger modules names are different\n\n```\n[ALIASES]\nntoskrnl_vuln.exe=ntkrnlmp.exe\n```\n\nThe ``[ALIASES]`` section is used to customize the name which is used by a\ndisassembler (IDA/Ghidra) to register a module to its dispatcher/program\nmanager.\n\nBy default, disassembler plugins use the name of the input file. However one\nmay have renamed the file beforehand and it doesn't match anymore the name of\nthe actual process or loaded module as seen by the debugger.\n\nHere we simply tell to the dispatcher to match the name `ntkrnlmp.exe` (real\nname) instead of `ntoskrnl_vuln.exe` (IDB name).\n\n\n## gdb with Qt Creator debugging frontend\n\nThe Qt Creator debugging frontend changes the way gdb command output is logged. Since\nthis would interfere with the synchronization an option exists to use the raw gdb output\nfor synchronization instead of a temporary file. In the .sync configuration file use\n\n```\n[GENERAL]\nuse_tmp_logging_file=false\n```\n\nif you wish to use the Qt debugging frontend for the target.\n\n## Embedded devices and missing ``/proc/<pid>/maps``\n\nIn some scenarios, such as debugging embedded devices over serial or raw\nfirmware in QEMU, gdb is not aware of the PID and cannot access\n``/proc/<pid>/maps``.\n\nIn these cases, The ``[INIT]`` section is used to pass a custom context to the\nplugin. It allows overriding some fields such as the PID and memory mappings.\n\n`.sync` content extract:\n\n```\n[INIT]\ncontext = {\n      \"pid\": 200,\n      \"mappings\": [ [0x400000, 0x7A81158, 0x7681158, \"asav941-200.qcow2|lina\"] ]\n  }\n```\n\nEach entry in the mappings is: ``mem_base``, ``mem_end``, ``mem_size``, ``mem_name``.\n\n\n## Bypassing automatic address rebasing\n\nIn some scenarios, such as debugging embedded devices or connecting to\nminimalist debug interfaces, it may be more convenient to bypass the\nautomatic address rebasing feature implemented in the disassembler plugins.\n\nThe `use_raw_addr` option is currently supported only for Ghidra. In\nthe .sync configuration file use:\n\n```\n[GENERAL]\nuse_raw_addr=true\n```\n\n\n# Installation\n\n## IDA extension\n\n### IDA prerequisites\n\nIDA 7.x branch is required. For older versions (6.9x) please see archived\nrelease ``ida6.9x``.\n\n### Install the IDA extension\n\nFor IDA installation, copy ``Syncplugin.py`` and ``retsync`` folder from\n``ext_ida`` to IDA plugins directory, for example:\n\n* ``C:\\Program Files\\IDA Pro 7.4\\plugins``\n* ``%APPDATA%\\Hex-Rays\\IDA Pro\\plugins``\n* ``~/.idapro/plugins``\n\n### Run the IDA extension\n\n1. Open IDB\n2. Run the plugin in IDA (``Alt-Shift-S``) or ``Edit`` -> ``Plugins`` -> ``ret-sync``\n\n```\n[sync] default idb name: ld.exe\n[sync] sync enabled\n[sync] cmdline: \"C:\\Program Files\\Python38\\python.exe\" -u \"C:\\Users\\user\\AppData\\Roaming\\Hex-Rays\\IDA Pro\\plugins\\retsync\\broker.py\" --idb \"target.exe\"\n[sync] module base 0x100400000\n[sync] hexrays #7.3.0.190614 found\n[sync] broker started\n[sync] plugin loaded\n[sync] << broker << dispatcher not found, trying to run it\n[sync] << broker << dispatcher now runs with pid: 6544\n[sync] << broker << connected to dispatcher\n[sync] << broker << listening on port 63107\n\n```\n\n### IDA plugin troubleshooting\n\nTo troubleshoot issues with the IDA extension two options are available in the\nfile `retsync/rsconfig.py`:\n\n```\nLOG_LEVEL = logging.INFO\nLOG_TO_FILE_ENABLE = False\n```\n\nSetting `LOG_LEVEL` value to ` logging.DEBUG` makes the plugin more verbose.\n\nSetting `LOG_TO_FILE_ENABLE` value to `True` triggers the logging of exception\ninformation from `broker.py` and `dispatcher.py` into dedicated files. Log file\nare generated in the `%TMP%` folder with a name pattern `retsync.%s.err` .\n\n\n## Ghidra extension\n\n### Build the Ghidra extension\n\nEither use the pre-built version from the `ext_ghidra/dist` folder or follow the instruction to build it.\nEach extension build only supports the version of Ghidra specified in the plugin's file name.\nE.g. `ghidra_9.1_PUBLIC_20191104_retsync.zip` is for Ghidra 9.1 Public.\n\n1. Install Ghidra\n2. Install gradle\n\n```bash\napt install gradle\n```\n\n3. Build extension for your Ghidra installation (replace `$GHIDRA_DIR` with your installation directory)\n\n```bash\ncd ext_ghidra\ngradle -PGHIDRA_INSTALL_DIR=$GHIDRA_DIR\n```\n\n### Install the Ghidra extension\n\n1. From Ghidra projects manager: ``File`` -> ``Install Extensions...``, click on the\n   `+` sign and select the `ext_ghidra/dist/ghidra_*_retsync.zip` and click OK.\n   This will effectively extract the `retsync` folder from the zip into\n   `$GHIDRA_DIR/Extensions/Ghidra/`\n2. Restart Ghidra as requested\n3. After reloading Ghidra, open a module in CodeBrowser. It should tell you a\n   new extension plugin has been detected. Select \"yes\" to configure it. Then\n   tick \"RetSyncPlugin\" and click OK. The console should show something like:\n\n```\n[*] retsync init\n[>] programOpened: tm.sys\n    imageBase: 0x1c0000000\n```\n\n4. From Ghidra CodeBrowser tool: use toolbar icons or shortcuts to enable (``Alt+s``)/disable (``Alt+Shift+s``)/restart (``Alt+r``)\n   synchronization.\n\nA status window is also available from ``Windows`` -> ``RetSyncPlugin``. You\ngenerally want to drop it on the side to integrate it with the Ghidra\nenvironment windows.\n\n\n## Binary Ninja extension\n\nBinary Ninja support is experimental, make sure to backup your analysis\ndatabases.\n\n### Binary Ninja prerequisites\n\n**ret-sync** requires Binary Ninja version 2.2 at minimum as well as Python 3\n(Python 2 is not supported).\n\n\n### Install the Binary Ninja extension\n\n**ret-sync** is not yet distributed through the Binary Ninja's Plugin Manager;\na manual installation is required. Simply copy that content of the `ext_bn`\nfolder into Binary Ninja's plugins folder, for example:\n\n`%APPDATA%\\Binary Ninja\\plugins`\n\nAfter restarting Binary Ninja, the following output should be present in the\nconsole window:\n\n```\n[sync] commands added\nLoaded python3 plugin 'retsync'\n```\n\n\n## WinDbg extension\n\n### Build the WinDbg extension\n\nEither use pre-built binaries or use the Visual Studio 2017\nsolution provided in ``ext_windbg``, (see\nhttps://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-relnotes if\nneeded).\n\nThis will build the `x64\\release\\sync.dll` file.\n\n### Install the WinDbg extension\n\nYou will need to copy the resulting `sync.dll` file into the\nappropriate Windbg extension path.\n\n* WinDbg Classic:\n\nFor earlier versions of Windbg this is is something like this (be\ncareful of ``x86``/``x64`` flavours), for example\n\n`C:\\Program Files (x86)\\Windows Kits\\10\\Debuggers\\x64\\winext\\sync.dll`\n\n* Windbg Preview\n\nThe folder for storing extension seems to be based on the PATH, so you need to\nput it one of the queried locations.\n\nOne example is to put it here:\n\n`C:\\Users\\user\\AppData\\Local\\Microsoft\\WindowsApps\\sync.dll`\n\n### Run the WinDbg extension\n\n1. Launch WinDbg on target\n2. Load extension (``.load`` command)\n\n```\n    0:000> .load sync\n    [sync.dll] DebugExtensionInitialize, ExtensionApis loaded\n```\n\n3. Sync WinDbg\n\n```\n      0:000> !sync\n      [sync] No argument found, using default host (127.0.0.1:9100)\n      [sync] sync success, sock 0x5a8\n      [sync] probing sync\n      [sync] sync is now enabled with host 127.0.0.1\n```\n\nE.g. in IDA's Output window\n\n```\n      [*] << broker << dispatcher msg: add new client (listening on port 63898), nb client(s): 1\n      [*] << broker << dispatcher msg: new debugger client: dbg connect - HostMachine\\HostUser\n      [sync] set debugger dialect to windbg, enabling hotkeys\n```\n\nIf Windbg's current module matches IDA file name\n\n```\n      [sync] idb is enabled with the idb client matching the module name.\n```\n\n### WinDbg installation troubleshooting\n\nNote: If you get the following error, it is because you haven't copied the file\nto the right folder in the above steps.\n\n```\n0: kd> .load sync\nThe call to LoadLibrary(sync) failed, Win32 error 0n2\n    \"The system cannot find the file specified.\"\nPlease check your debugger configuration and/or network access.\n```\n\nThe error below usually means that Windbg tried to load the incorrect flavour\nof the extension, ex: ``x64`` in place of the ``x86`` `sync.dll`.\n\n```\n0:000> .load sync\nThe call to LoadLibrary(sync) failed, Win32 error 0n193\n    \"%1 is not a valid Win32 application.\"\nPlease check your debugger configuration and/or network access.\n```\n\nAs WinDbg Preview loads both plugins (``x86`` and  ``x64``) from the same\ndirectory, one can rename the ``x86`` file `sync32.dll`.\n\n```\n0:000> .load sync32\n```\n\n\n## GNU gdb (GDB) installation\n\n1. Copy the `ext_gdb/sync.py` to the directory of your choice\n2. Load the extension (see auto-load-scripts)\n\n```\n    gdb> source sync.py\n    [sync] configuration file loaded 192.168.52.1:9100\n    [sync] commands added\n```\n\n## LLDB installation\n\nLLDB support is experimental, however:\n\n1. Load extension (can also be added in ``~/.lldbinit``)\n\n```\n    lldb> command script import sync\n```\n\n## OllyDbg 1.10 installation\n\nOllyDbg 1.10 support is experimental, however:\n\n1. Build the plugin using the VS solution (optional, see pre-built binaries)\n2. Copy the dll within OllyDbg's plugin directory\n\n## OllyDbg2 installation\n\nOllyDbg2 support is experimental, however:\n\n1. Build the plugin using the VS solution (optional, see pre-built binaries)\n2. Copy the dll within OllyDbg2's plugin directory\n\n## x64dbg installation\n\nBased on testplugin,  https://github.com/x64dbg/testplugin. x64dbg support is experimental, however:\n\n1. Build the plugin using the VS solution (optional, see pre-built binaries).\n   May you need a different version of the plugin sdk,\n   a copy can be found in each release of x64dbg.\n   Paste the \"``pluginsdk``\" directory into \"``ext_x64dbg\\x64dbg_sync``\"\n2. Copy the dll (extension is ``.d32`` or ``.dp64``) within x64dbg's plugin directory.\n\n# Usage\n\n## **ret-sync** debugger commands\n\nFor command-line oriented debuggers (mainly Windbg and GDB) a set of commands\nis exposed by **ret-sync** to assist in the reverse-engineering task.\n\nThe commands below are generic (Windbg and GDB), please note that a `!`\nprefix is needed on WinDbg (e.g.: `sync`  in GDB, `!sync` in Windbg).\n\n| Debugger command           | Description                                                                               |\n|----------------------------|-------------------------------------------------------------------------------------------|\n| `synchelp`                   | Display the list of available commands with short explanation                             |\n| `sync`                       | Start synchronization                                                                     |\n| `syncoff`                    | Stop synchronization                                                                      |\n| `cmt [-a address] <string>`  | Add a comment at current ip in disassembler                                               |\n| `rcmt [-a address]`          | Reset comment at current ip in disassembler                                               |\n| `fcmt [-a address] <string>` | Add a function comment for function in which current ip is located                        |\n| `raddr <expression>`         | Add a comment with rebased address evaluated from expression                              |\n| `rln <expression>`           | Get symbol from the disassembler for the given address                                    |\n| `lbl [-a address] <string>`  | Add a label name at current ip in disassembler                                            |\n| `cmd <string>`               | Execute a command in debugger and add its output as comment at current ip in disassembler |\n| `bc <\\|\\|on\\|off\\|set 0xBBGGRR>` | Enable/disable path coloring in disassembler                                              |\n| `idblist`                    | Get list of all IDB clients connected to the dispatcher                                   |\n| `syncmodauto <on\\|off>`       | Enable/disable disassembler auto switch based on module name                              |\n| `idbn <n>`                   | Set active IDB to the nth client                                                          |\n| `jmpto <expression>`         |                                                                                           |\n| `jmpraw <expression>` | If an IDB is enabled then disassembler's view is synced with the resulting address.    |\n| `translate <base> <addr> <mod>` | rebase an address with respect to its module's name and offset   |\n\n\nWinDbg specific commands:\n\n| Debugger command           | Description                                                                               |\n|----------------------------|-------------------------------------------------------------------------------------------|\n| `curmod`  |  Display module infomation for current instruction offset (for troubleshooting) |\n| `modlist`  |  Debugger Markup Language (DML) enhanced module list meant for smoother active idb switching  |\n| `idb <module name>`  |  Set given module as the active idb (see `modlist` enhanced version of `lm`) |\n| `modmap <base> <size> <name>` |  A synthetic (\"faked\") module (defined using its base address and size) is added to the debugger internal list  |\n| `modunmap <base>` |  Remove a previously mapped synthetic module at base address  |\n| `modcheck <\\|\\|md5>`  |  Use to check if current module really matches IDB's file (ex: module has been updated)  |\n| `bpcmds <\\|\\|save\\|load\\|>` | **bpcmds** wrapper, save and reload **.bpcmds** (breakpoints commands list) output to current IDB  |\n| `ks` | Debugger Markup Language (DML) enhanced output of **kv** command   |\n\n\nGDB specific commands:\n\n| Debugger command           | Description                                                                               |\n|----------------------------|-------------------------------------------------------------------------------------------|\n|`bbt` |  Beautiful backtrace. Similar to **bt** in GDB but requests symbols from disassembler  |\n| `patch`  | Patch bytes in disassembler based on live context   |\n| `bx` | Similar to GDB **x** but using a symbol. The symbol will be resolved by disassembler   |\n| `cc` | Continue to cursor in disassembler  |\n\n\n## IDA usage\n\n### IDA plugin's GUI\n\nThe ``Overwrite idb name`` input field is meant to change the default IDB\nname. It is the name that is used by the plugin to register with the\ndispatcher. IDB automatic switch is based on module name matching. In case of\nconflicting names (like a ``foo.exe`` and ``foo.dll``), this can be used to\nease matching. Please note, if you modify the input field while the sync is\nactive, you have to re-register with the dispatcher; this can be done simply\nby using the \"``Restart``\" button.\n\nAs a reminder it is possible to alias by default using the ``.sync`` configuration file.\n\n\n\n### IDA global shortcuts\n\n**ret-sync** defines these global shortcuts in IDA:\n\n* ``Alt-Shift-S``  - Run **ret-sync** plugin\n* ``Ctrl-Shift-S``  - Toggle global syncing\n* ``Ctrl-H``  - Toggle Hex-Rays syncing\n\nTwo buttons are also available in the Debug toolbar to toggle global and\nHex-Rays syncing.\n\n### IDA bindings over debugger commands\n\n``Syncplugin.py`` also registers debugger command wrapper hotkeys.\n\n* ``F2`` - Set breakpoint at cursor address\n* ``F3`` - Set one-shot breakpoint at cursor address\n* ``Ctrl-F2`` - Set hardware breakpoint at cursor address\n* ``Ctrl-F3`` - Set one-shot hardware breakpoint at cursor address\n* ``Alt-F2`` - Translate (rebase in debugger) current cursor address\n* ``Alt-F5`` - Go\n* ``Ctrl-Alt-F5`` - Run (GDB only)\n* ``F10`` - Single step\n* ``F11`` - Single trace\n\nThese commands are only available when the current IDB is active. When\npossible they have also been implemented for others debuggers.\n\n## Ghidra usage\n\n### Ghidra plugin's GUI\n\nOnce the RetSyncPlugin opened, you can add it to the CodeBrowser window by simple\ndrag'n'drop:\n\n![](img/ghidra.png)\n\nIf you want to view several modules, files need to be open in the same CodeBrowser\nviewer, simply drag'n'drop the additional ones in the CodeBrowser window to obtain\nthe result as above.\n\n### Ghidra global shortcuts\n\n**ret-sync** defines these global shortcuts in Ghidra:\n\n* ``Alt-S``  - Enable syncing\n* ``Alt-Shift-S``  - Disable syncing\n* ``Alt-R``  - Restart syncing\n* ``Alt-Shift-R``  - Reload configuration\n\n### Ghidra bindings over debugger commands\n\nBindings over debugger commands are also implemented. They are similar to the\nones from IDA's extension (except the \"Go\" command).\n\n* ``F2``  - Set breakpoint at cursor address\n* ``Ctrl-F2`` - Set hardware breakpoint at cursor address\n* ``Alt-F3`` - Set one-shot breakpoint at cursor address\n* ``Ctrl-F3`` - Set one-shot hardware breakpoint at cursor address\n* ``Alt-F2`` - Translate (rebase in debugger) current cursor address\n* ``F5`` - Go\n* ``Alt-F5`` - Run (GDB only)\n* ``F10`` - Single step\n* ``F11`` - Single trace\n\n\n## Binary Ninja usage\n\n### Binary Ninja global shortcuts\n\n**ret-sync** defines these global shortcuts in Binary Ninja:\n\n* ``Alt-S``  - Enable syncing\n* ``Alt-Shift-S``  - Disable syncing\n\n\n### Binary Ninja shortcuts\n\nBindings over debugger commands are also implemented. They are similar to the\nones from IDA's extension.\n\n* ``F2``  - Set breakpoint at cursor address\n* ``Ctrl-F2`` - Set hardware breakpoint at cursor address\n* ``Alt-F3`` - Set one-shot breakpoint at cursor address\n* ``Ctrl-F3`` - Set one-shot hardware breakpoint at cursor address\n* ``Alt-F2`` - Translate (rebase in debugger) current cursor address\n* ``Alt-F5`` - Go\n* ``F10`` - Single step\n* ``F11`` - Single trace\n\n\n## WinDbg usage\n\n### WinDbg plugin commands\n\n* **!sync**: Start synchronization\n* **!syncoff**: Stop synchronization\n* **!synchelp**: Display the list of available commands with short explanation.\n* **!cmt [-a address] <string>**: Add comment at current ip in IDA\n\n```\n    [WinDbg]\n    0:000:x86> pr\n    eax=00000032 ebx=00000032 ecx=00000032 edx=0028eebc esi=00000032 edi=00000064\n    eip=00430db1 esp=0028ed94 ebp=00000000 iopl=0         nv up ei pl nz na po nc\n    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202\n    image00000000_00400000+0x30db1:\n    00430db1 57    push    edi\n\n    0:000:x86> dd esp 8\n    0028ed94  00000000 00433845 0028eebc 00000032\n    0028eda4  0028f88c 00000064 002b049e 00000110\n\n    0:000:x86> !cmt 0028ed94  00000000 00433845 0028eebc 00000032\n    [sync.dll]  !cmt called\n\n    [IDA]\n    .text:00430DB1    push    edi             ; 0028ed94  00000000 00433845 0028eebc 00000032\n```\n\n* **!rcmt [-a address]**: Reset comment at current ip in IDA\n\n```\n    [WinDbg]\n    0:000:x86> !rcmt\n    [sync] !rcmt called\n\n    [IDA]\n    .text:00430DB1    push    edi\n```\n\n* **!fcmt [-a address] <string>**: Add a function comment for function in which current ip is located\n\n```\n    [WinDbg]\n    0:000:x86> !fcmt decodes buffer with key\n    [sync] !fcmt called\n\n    [IDA]\n    .text:004012E0 ; decodes buffer with key\n    .text:004012E0                 public decrypt_func\n    .text:004012E0 decrypt_func    proc near\n    .text:004012E0                 push    ebp\n```\n\nNote: calling this command without argument reset the function's comment.\n\n* **!raddr <expression>**: Add a comment with rebased address evaluated from expression\n* **!rln <expression>**: Get symbol from the disassembler for the given address\n* **!lbl [-a address] <string>**: Add a label name at current ip in disassembler\n\n```\n    [WinDbg]\n    0:000:x86> !lbl meaningful_label\n    [sync] !lbl called\n\n    [IDA]\n    .text:000000000040271E meaningful_label:\n    .text:000000000040271E    mov     rdx, rsp\n```\n\n* **!cmd <string>**: Execute a command in WinDbg and add its output as comment at current ip in disassembler\n\n```\n    [WinDbg]\n    0:000:x86> pr\n    eax=00000032 ebx=00000032 ecx=00000032 edx=0028eebc esi=00000032 edi=00000064\n    eip=00430db1 esp=0028ed94 ebp=00000000 iopl=0         nv up ei pl nz na po nc\n    cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00000202\n    image00000000_00400000+0x30db1:\n    00430db1 57     push    edi\n    [sync.dll]  !cmd r edi\n\n    [IDA]\n    .text:00430DB1    push    edi             ; edi=00000064\n```\n\n* **!bc <||on|off|set 0xBBGGRR>** : Enable/disable path coloring in disassembler.\n  This is NOT a code tracing tool,\n  there are efficient tools for that. Each manually stepped instruction is\n  colored in the graph. Color a single instruction at current ip if called\n  without argument.\n  \"set\" argument is used to set path color with a new hex rgb code (reset color\n  if called with a value > 0xFFFFFF).\n* **!idblist**: Get list of all IDB clients connected to the dispatcher:\n\n```\n    [WinDbg]\n    0:000> !idblist\n    > currently connected idb(s):\n        [0] target.exe\n```\n\n* **!syncmodauto <on|off>**: Enable/disable disassembler auto switch based on module name:\n\n```\n    [WinDbg]\n    0:000> !syncmodauto off\n\n    [IDA]\n    [*] << broker << dispatcher msg: sync mode auto set to off\n```\n\n* **!idbn <n>**: Set active IDB to the nth client. n should be a valid decimal value.\n  This is a semi-automatic mode (personal tribute to the tremendous jj)\n\n```\n    [WinDbg]\n    0:000:> !idbn 0\n    > current idb set to 0\n```\n\nIn this example, current active IDB client would have been set to:\n\n```\n\t[0] target.exe.\n```\n\n* **!jmpto <expression>**: Expression given as argument is evaluated in the context of the current debugger's status.\n  disassembler's view is then synced with the resulting address if a matching module is registered.\n  Can be seen as a manual syncing, relocation is automatically performed, on the fly.\n  Especially useful for randomly relocated binary.\n* **!jmpraw <expression>**: Expression given as argument is evaluated in the context of the current debugger's status.\n  If an IDB is enabled then disassembler's view is synced with the resulting address. Address is not rebased\n  and there is no IDB switching.\n  Especially useful for dynamically allocated/generated code.\n* **!modmap <base> <size> <name>**: A synthetic (\"faked\") module (defined using its base address and size) is added to the debugger internal list.\n  From msdn: \"If all the modules are reloaded - for example, by calling Reload with the Module parameter set to an empty string - all synthetic modules will be discarded.\"\n  It can be used to more easily debug dynamically allocated/generated code.\n* **!modunmap <base>**: Remove a previously mapped synthetic module at base address.\n* **!modcheck <||md5>**: Use to check if current module really matches IDB's file (ex: module has been updated)\n  When called without an argument, pdb's GUID from Debug Directory is used. It can alternatively use md5,\n  but only with a local debuggee (not in remote kernel debugging).\n* **!bpcmds <||save|load|>**: **bpcmds** wrapper, save and reload **.bpcmds** (breakpoints commands list) output to current IDB.\n  Display (but not execute) saved data if called with no argument.\n  Persistent storage is achieved using IDA's netnode feature.\n* **!ks**: Debugger Markup Language (DML) enhanced output of **kv** command. Code Addresses are clickable (**!jmpto**) as well as data addresses (**dc**).\n* **!translate <base> <addr> <mod>**: Meant to be used from IDA (``Alt-F2`` shortcut), rebase an address with respect to its module's name and offset.\n\n#### Address optional argument\n\n**!cmt**, **!rcmt** and **!fcmt** commands support an optional address option: ``-a`` or ``--address``.\nAddress should be passed as an hexadecimal value. Command parsing is based on python's\n``argparse`` module. To stop line parsing use ``--``.\n\n```\n    [WinDbg]\n    0:000:x86> !cmt -a 0x430DB2 comment\n```\n\nThe address has to be a valid instruction's address.\n\n## GNU gdb (GDB) usage\n\nSync with host:\n\n```\n    gdb> sync\n    [sync] sync is now enabled with host 192.168.52.1\n    <not running>\n\n    gdb> r\n    Starting program: /bin/ls\n    [Thread debugging using libthread_db enabled]\n    Using host libthread_db library \"/lib/libthread_db.so.1\".\n```\n\n### GDB plugin commands\n\nUse commands, **without \"!\" prefix**\n\n```\n    (gdb) cmd x/i $pc\n    [sync] command output: => 0x8049ca3:    push   edi\n\n    (gdb) synchelp\n    [sync] extension commands help:\n     > sync <host>\n     > syncoff\n     > cmt [-a address] <string>\n     > rcmt [-a address] <string>\n     > fcmt [-a address] <string>\n     > cmd <string>\n     > bc <on|off|>\n     > rln <address>\n     > bbt <symbol>\n     > patch <addr> <count> <size>\n     > bx /i <symbol>\n     > cc\n     > translate <base> <addr> <mod>\n```\n\n* **rln**: Get symbol from the IDB for the given address\n* **bbt**: Beautiful backtrace. Similar to **bt** but requests symbols from disassembler\n\n```\n    (gdb) bt\n    #0  0x0000000000a91a73 in ?? ()\n    #1  0x0000000000a6d994 in ?? ()\n    #2  0x0000000000a89125 in ?? ()\n    #3  0x0000000000a8a574 in ?? ()\n    #4  0x000000000044f83b in ?? ()\n    #5  0x0000000000000000 in ?? ()\n    (gdb) bbt\n    #0 0x0000000000a91a73 in IKE_GetAssembledPkt ()\n    #1 0x0000000000a6d994 in catcher ()\n    #2 0x0000000000a89125 in IKEProcessMsg ()\n    #3 0x0000000000a8a574 in IkeDaemon ()\n    #4 0x000000000044f83b in sub_44F7D0 ()\n    #5 0x0000000000000000 in  ()\n```\n\n\n* **patch**: Patch bytes in disassembler based on live context\n* **bx**: Beautiful display. Similar to **x** but using a symbol. The symbol\n  will be resolved by disassembler.\n* **cc**: Continue to cursor in disassembler. This is an alternative to using ``F3`` to\n  set a one-shot breakpoint and ``F5`` to continue. This is useful if you prefer\n  to do it from gdb.\n\n```\n    (gdb) b* 0xA91A73\n    Breakpoint 1 at 0xa91a73\n    (gdb) c\n    Continuing.\n\n    Breakpoint 1, 0x0000000000a91a73 in ?? ()\n    (gdb) cc\n    [sync] current cursor: 0xa91a7f\n    [sync] reached successfully\n    (gdb)\n```\n\n\n## LLDB usage\n\n1. Sync with host\n\n```\n    lldb> process launch -s\n    lldb> sync\n    [sync] connecting to localhost\n    [sync] sync is now enabled with host localhost\n    [sync] event handler started\n```\n\n2. Use commands\n\n```\n    lldb> synchelp\n    [sync] extension commands help:\n     > sync <host>                   = synchronize with <host> or the default value\n     > syncoff                       = stop synchronization\n     > cmt <string>                  = add comment at current eip in IDA\n     > rcmt <string>                 = reset comments at current eip in IDA\n     > fcmt <string>                 = add a function comment for 'f = get_func(eip)' in IDA\n     > cmd <string>                  = execute command <string> and add its output as comment at current eip in IDA\n     > bc <on|off|>                  = enable/disable path coloring in IDA\n                                       color a single instruction at current eip if called without argument\n    lldb> cmt mooo\n```\n\n\n## OllyDbg 1.10 usage\n\n1. Use Plugins menu or shortcuts to enable (``Alt+s``)/disable (``Alt+u``)\n   synchronization.\n\n\n## OllyDbg2 usage\n\n1. Use Plugins menu or shortcuts to enable (``Ctrl+s``)/disable (``Ctrl+u``)\n   synchronization.\n\nDue to the beta status of OllyDbg2 API, only the following features have been implemented:\n\n- Graph sync [use ``F7``; ``F8`` for stepping]\n- Comment   [use ``CTRL+;``]\n- Label     [use ``CTRL+:``]\n\n\n## x64dbg usage\n\n1. Use Plugins menu or commands enable (\"``!sync\"``) or disable (\"``!syncoff``\") synchronization.\n\n2. Use commands\n\n```\n[sync] synchelp command!\n[sync] extension commands help:\n > !sync                          = synchronize with <host from conf> or the default value\n > !syncoff                       = stop synchronization\n > !syncmodauto <on | off>        = enable / disable idb auto switch based on module name\n > !synchelp                      = display this help\n > !cmt <string>                  = add comment at current eip in IDA\n > !rcmt <string>                 = reset comments at current eip in IDA\n > !idblist                       = display list of all IDB clients connected to the dispatcher\n > !idb <module name>             = set given module as the active idb (see !idblist)\n > !idbn <n>                      = set active idb to the n_th client. n should be a valid decimal value\n > !translate <base> <addr> <mod> = rebase an address with respect to local module's base\n```\n\nNote: using the **!translate** command from a disassembler (IDA/Ghidra,\n``Alt-F2`` shortcut), will make the disassembler window to \"jump\" to the\nspecific address (equivalent of running **disasm <rebased addr>** in x64dbg\ncommand line).\n\n\n## Python library usage\n\nOne may want to use **ret-sync** core features (position syncing with a\ndisassembler, symbol resolution) even though a full debugging environment is\nnot available or with a custom tool. To that end, a minimalist Python library\nhas been extracted.\n\nThe example below illustrates the usage of the Python library with a script\nthat walks through the output of an event based logging/tracing tool.\n\n\n```python\nfrom sync import *\n\nHOST = '127.0.0.1'\n\nMAPPINGS = [\n    [0x555555400000, 0x555555402000,  0x2000, \" /bin/tempfile\"],\n    [0x7ffff7dd3000, 0x7ffff7dfc000, 0x29000, \" /lib/x86_64-linux-gnu/ld-2.27.so\"],\n    [0x7ffff7ff7000, 0x7ffff7ffb000,  0x4000, \" [vvar]\"],\n    [0x7ffff7ffb000, 0x7ffff7ffc000,  0x1000, \" [vdso]\"],\n    [0x7ffffffde000, 0x7ffffffff000, 0x21000, \" [stack]\"],\n]\n\nEVENTS = [\n    [0x0000555555400e74, \"malloc\"],\n    [0x0000555555400eb3, \"open\"],\n    [0x0000555555400ee8, \"exit\"]\n]\n\nsynctool = Sync(HOST, MAPPINGS)\n\nfor e in EVENTS:\n    offset, name = e\n    synctool.invoke(offset)\n    print(\"    0x%08x - %s\" % (offset, name))\n    print(\"[>] press enter for next event\")\n    input()\n```\n\n\n# Extend\n\nWhile initially focused on dynamic analysis (debuggers), it is of-course\npossible to extend the plugins set and integrate with other tools.\n\n- Integration with **REVEN** Timeless Analysis and Debugging Platform by [Tetrane](https://www.tetrane.com/):\n  - http://blog.tetrane.com/2015/02/reven-in-your-toolkit.html\n  - https://twitter.com/tetrane/status/1374768014193799175\n- Integration with **EFI DXE Emulator** by Assaf Carlsbad ([@assaf_carlsbad](https://twitter.com/assaf_carlsbad)):\n  - https://twitter.com/assaf_carlsbad/status/1242114356881641474\n  - https://github.com/assafcarlsbad/efi_dxe_emulator\n\nOther resource(s):\n\n- \"*Combining static and dynamic binary analysis - ret-sync*\" by Jean-Christophe Delaunay\n  - https://www.synacktiv.com/ressources/bieresecu1_ret-sync_en.pdf\n\n\n# TODO\n\n- Sure.\n\n# Known Bugs/Limitations\n\n- Tested with Python 2.7/3.7, IDA 7.7 (Windows, Linux and Mac OS X), Ghidra 10.1.1, Binary Ninja 3.0.3225-dev, GNU gdb (GDB) 8.1.0 (Debian), lldb 310.2.37.\n- **THERE IS NO AUTHENTICATION/ENCRYPTION** whatsoever between the parties; you're on your own.\n- Self modifying code is out of scope.\n\nWith GDB:\n\n- it seems that stop event is not called when using 'return' command.\n- multi-threading debugging have issues with signals.\n\nWith WinDbg:\n\n- IDA's client plugin gets notified even though encountered breakpoint\n  uses a command string that makes it continue ('``g``'). This can cause major slow-down\n  if there are too much of these events. A limited fix has been implemented, the\n  best solution is still to sync off temporarily.\n- Possible race condition\n\nWith Ghidra:\n\n- Shortcuts are not working as expected in decompiler widget.\n\nWith IDA:\n\n- Graph window redrawing is quite slow for big graphs.\n- **ret-sync** shortcuts conflicts in Linux environments.\n\nConflict(s):\n\n- Logitech Updater software is known to use the same default port (9100). A solution\n  is to use a global `.sync` configuration file to define a different port.\n\n```\n[INTERFACE]\nhost=127.0.0.1\nport=9234\n```\n\n# License\n\n**ret-sync** is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see http://www.gnu.org/licenses/.\n\nThe Binary Ninja plugin is released under the MIT licence.\n\n\n# Greetz\n\nHail to Bruce Dang, StalkR, @Ivanlef0u, Damien Aumaître, Sébastien Renaud and\nKévin Szkudlapski, @_m00dy_, @saidelike, Xavier Mehrenberger, ben64, Raphaël\nRigo, Jiss for their kindness, help, feedbacks and thoughts. Ilfak Guilfanov,\nIgor Skochinsky and Arnaud Diederen for their help with IDA's internals and\noutstanding support. Thank you to Jordan Wiens and Vector 35. Finally, thank\nyou also to all the contributors and everyone who reported issues/bugs.\n"
  },
  {
    "projectUrl": "https://github.com/binarly-io/efiXplorer",
    "description": "IDA plugin for UEFI firmware analysis and reverse engineering automation",
    "longdescription": "[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](http://www.gnu.org/licenses/gpl-3.0)\n[![efiXplorer CI](https://github.com/binarly-io/efiXplorer/actions/workflows/ci-build.yml/badge.svg)](https://github.com/binarly-io/efiXplorer/actions)\n\n<p align=\"center\">\n  <img alt=\"efiXlorer Logo\" src=\"pics/efiXplorer_logo.png\" width=\"20%\">\n</p>\n\n**efiXplorer** - IDA plugin for UEFI firmware analysis and reverse engineering automation\n\n__Supported versions of Hex-Rays products:__ everytime we focus on last versions of IDA and Decompiler because we try to use most recent features from new SDK releases. That means we tested only on recent versions of Hex-Rays products and do not guarantee stable work on previous generations.\n\n__Why not IDApython:__ all code developed in C++ because it's a more stable and performant way to support a complex plugin and get full power of most recent SDK's features.\n\n__Supported Platforms:__ Windows, Linux and OSX.\n\n## [efiXplorer core features](https://github.com/binarly-io/efiXplorer/wiki/efiXplorer-features)\n\n## [efiXloader description](https://github.com/binarly-io/efiXplorer/wiki/efiXloader)\n\n## [Build instructions and Installation](https://github.com/binarly-io/efiXplorer/wiki/Build-instruction-and-installation)\n\n## Publications\n\n* [efiXplorer: Hunting for UEFI Firmware Vulnerabilities at Scale with Automated Static Analysis](https://i.blackhat.com/eu-20/Wednesday/eu-20-Labunets-efiXplorer-Hunting-For-UEFI-Firmware-Vulnerabilities-At-Scale-With-Automated-Static-Analysis.pdf)\n* [Static analysis-based recovery of service function calls in UEFI firmware](https://github.com/binarly-io/Research_Publications/blob/main/EKO_2020/EKO_2020_efiXplorer.pdf)\n* [How efiXplorer helping to solve challenges in reverse engineering of UEFI firmware](https://www.youtube.com/watch?v=FFGQJBmRkLw)\n\n## References\n\n* https://github.com/LongSoft/UEFITool\n* https://github.com/yeggor/uefi_retool\n* https://github.com/gdbinit/EFISwissKnife\n* https://github.com/snare/ida-efiutils\n* https://github.com/al3xtjames/ghidra-firmware-utils\n* https://github.com/DSecurity/efiSeek\n* https://github.com/p-state/ida-efitools2\n* https://github.com/zznop/bn-uefi-helper\n"
  },
  {
    "projectUrl": "https://github.com/airbus-cert/ttddbg",
    "description": "Time Travel Debugging IDA plugin",
    "longdescription": "# ttddbg - Time Travel Debugging IDA plugin\n\n**⚠️ Attention IDA 8 users: using ttddbg with IDA 8 require a work-around for the moment, see [Known issues](#known-issues)**\n\nThis plugin adds a new debugger to IDA which supports loading [Time Travel Debugging](https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/time-travel-debugging-overview) traces generated using WinDBG Preview.\n\n![ttddbg main window](screenshots/main_window.png)\n\nThis plugin supports both x86 and x64 traces, and by extension IDA and IDA64.\n\n## Installation\n\nInstalling the plugin can be done using the installer from the [releases page](https://github.com/airbus-cert/ttddbg/releases). The installer will automatically install the required dependencies, provided you have a copy of [WinDBG Preview](https://apps.microsoft.com/store/detail/windbg-preview/9PGJGD53TN86) installed.\n\n## Usage\n\nOnce installed, you can use the plugin by selecting the `ttddbg` debugger in the IDA interface, and specifying your `*.run` file as the \"Application\". For help on generating a `.run` file, see [`HOWTO_TIME_TRAVEL.md`](HOWTO_TIME_TRAVEL.md).\n\n![ttddbg debugger](screenshots/ida_ttddbg_dropdown.png)\n\n![ttdbg debugger setup](screenshots/ida_ttddbg_run.png)\n\n| Icon                                                        | Action                                                                                                             |\n| ----------------------------------------------------------- | ------------------------------------------------------------------------------------------------------------------ |\n| ![backward_icon](screenshots/ida_backward_icon.png)         | Go to previous breakpoint                                                                                          |\n| ![full run icon](screenshots/ida_full_run_icon.png)         | Simulate a full run of the program                                                                                 |\n| ![single_step_icon](screenshots/ida_single_step_icon.png)   | Single step backward (RIP - one instruction)                                                                       |\n| ![timeline_icon](screenshots/ida_timeline_icon.png)         | Manage the timeline of interesting events (Threads Created/Terminated, Module Loaded/Unloaded, Exceptions, Custom) |\n| ![traced functions icon](screenshots/ida_traced_icon.png)   | Manage the currently traced functions                                                                              |\n| ![trace events icon](screenshots/ida_trace_events_icon.png) | View trace events                                                                                                  |\n\n### Function tracing feature\n\nSince version 1.1.0, ttddbg supports a new feature we call \"function tracing\". While in the debugging view, it is possible to mark functions for tracing by right-clicking them in the *Functions* or *Module* interfaces. Once a function is traced, any call to this function, and any `return` statement, will be recorded in the new *Trace events* window.\n\nUsing the function information from your reverse engineering work, ttddbg also extracts the parameters passed to the function as well as its return value. Symbols are automatically pretty-printed based on the information available to IDA, such as enum values.\n\n## Known issues\n\n- Using **IDA Pro 8.2** and this plugin leads to a crash when entering the debugger. This issue appears to be caused by an incompatibility between this plugin and the `picture_search` plugin, which is new in IDA 8. Removing `picture_search.dll` and `picture_search64.dll` from the `plugins` folder temporarily fixes this issue. The problem has been raised to Hex-Rays.\n\n## Building the project\n\nPrerequisites:\n\n- A copy of the IDA SDK (available from the [download center](https://hex-rays.com/download-center/) using your IDA Pro credentials)\n- A copy of `TTDReplay.dll` (usually in `C:\\Program Files\\WindowsApps\\[WinDBG folder]\\amd64\\ttd\\`)\n- A copy of `TTDReplayCPU.dll` (usually in `C:\\Program Files\\WindowsApps\\[WinDBG folder]\\amd64\\ttd\\`)\n\nAnd let CMAKE do its magic!\n\n```console\n$ git clone git@github.com:airbus-cert/ttddbg.git --recursive\n$ mkdir build\n$ cd build\n$ cmake ..\\ttddbg -DIDA_SDK_SOURCE_DIR=[PATH_TO_IDA_SDK_ROOT_FOLDER] -DCPACK_PACKAGE_INSTALL_DIRECTORY=\"IDA Pro 7.7\"\n$ cmake --build . --target package --config release\n```\n\n## Developer corner\n\nTo create a dev solution:\n\n```console\n$ git clone git@github.com:airbus-cert/ttddbg.git --recursive\n$ mkdir build\n$ cd build\n$ cmake ..\\ttddbg -DIDA_SDK_SOURCE_DIR=[PATH_TO_IDA_SDK_ROOT_FOLDER] -DBUILD_TESTS=ON\n```\n\n# Credits and references\n\nGreetz to [commial](https://github.com/commial) for his work on [ttd-bindings](https://github.com/commial/ttd-bindings)!\n"
  },
  {
    "projectUrl": "https://github.com/airbus-seclab/bincat",
    "description": "Binary code static analyser, with IDA integration. Performs value and taint analysis, type reconstruction, use-after-free and double-free detection",
    "longdescription": "## Introduction\n\n### What is BinCAT?\n\nBinCAT is a *static* Binary Code Analysis Toolkit, designed to help reverse\nengineers, directly from IDA or using Python for automation.\n\nIt features:\n\n* value analysis (registers and memory)\n* taint analysis\n* type reconstruction and propagation\n* backward and forward analysis\n* use-after-free and double-free detection\n\n### In action\n\nYou can check (an older version of) BinCAT in action here:\n\n* [Basic analysis](https://syscall.eu/bincat/main.mp4)\n* [Using data tainting](https://syscall.eu/bincat/taint.mp4)\n\nCheck the [tutorial](doc/tutorial.md) out to see the corresponding tasks.\n\n### Quick FAQ\n\nSupported host platforms:\n\n* IDA plugin: all, version **7.4 or later** (Only Python 3 is supported)\n* analyzer (local or remote): Linux, Windows, macOS (maybe)\n\nSupported CPU for analysis (for now):\n* x86-32\n* x86-64\n* ARMv7\n* ARMv8\n* PowerPC\n\n## Installation\n\n**Only IDA v7.4 or later is supported**\n\nOlder versions may work, but we won't support them.\n\n### Binary distribution install (recommended)\n\nThe [binary distribution](https://github.com/airbus-seclab/bincat/releases)\nincludes everything needed:\n\n* the analyzer\n* the IDA plugin\n\nInstall steps:\n\n* Extract the [binary distribution](https://github.com/airbus-seclab/bincat/releases) of BinCAT (not the git repo)\n* In IDA, click on \"File -> Script File...\" menu (or type ALT-F7)\n* Select `install_plugin.py`\n* BinCAT is now installed in your IDA user dir\n* Restart IDA\n\n### Manual installation\n\n#### Analyzer\nThe analyzer can be used locally or through a Web service.\n\nOn Linux:\n* Using Docker: [Docker installation instructions](doc/install_docker.md)\n* Manual: [build and installation instructions](doc/install_manual.md)\n\nOn Windows:\n* [build instructions](doc/windows_build.md)\n\n#### IDA Plugin\n\n* [Windows manual install](doc/plugin_manual_win.md).\n* [Linux manual install](doc/install_plugin.md)\n\nBinCAT should work with IDA on Wine, once pip is installed:\n\n* download <https://bootstrap.pypa.io/get-pip.py> (verify it's good ;)\n* `~/.wine/drive_c/Python/python.exe get-pip.py`\n\n## Using BinCAT\n\n### Quick start\n* Load the plugin by using the `Ctrl-Shift-B` shortcut, or using the\n  `Edit -> Plugins -> BinCAT` menu\n\n* Go to the instruction where you want to start the analysis\n* Select the `BinCAT Configuration` pane, click `<-- Current` to define the start address\n* Launch the analysis\n\n### Configuration\nGlobal options can be configured through the `Edit/BinCAT/Options` menu.\n\nDefault config and options are stored in `$IDAUSR/idabincat/conf`.\n\n#### Options\n\n* \"Use remote bincat\": select if you are running docker in a Docker container\n* \"Remote URL\": http://localhost:5000 (or the URL of a remote BinCAT server)\n* \"Autostart\": autoload BinCAT at IDA startup\n* \"Save to IDB\": default state for the `save to idb` checkbox\n\n\n## Documentation\nA [manual](doc/manual.md) is provided and check [here](doc/ini_format.md) for a\ndescription of the configuration file format.\n\n\nA [tutorial](doc/tutorial.md) is provided to help you try BinCAT's features. \n\n\n## Article and presentations about BinCAT\n\n* [SSTIC 2017](https://www.sstic.org/2017/presentation/bincat_purrfecting_binary_static_analysis/), Rennes, France: [article](https://www.sstic.org/media/SSTIC2017/SSTIC-actes/bincat_purrfecting_binary_static_analysis/SSTIC2017-Article-bincat_purrfecting_binary_static_analysis-biondi_rigo_zennou_mehrenberger.pdf) (english), [slides](https://www.sstic.org/media/SSTIC2017/SSTIC-actes/bincat_purrfecting_binary_static_analysis/SSTIC2017-Slides-bincat_purrfecting_binary_static_analysis-biondi_rigo_zennou_mehrenberger.pdf) (french), [video of the presentation](https://static.sstic.org/videos2017/SSTIC_2017-06-07_P07.mp4) (french)\n* [REcon 2017](https://recon.cx/2017/montreal/talks/bincat.html), Montreal, Canada: [slides](https://syscall.eu/bincat/bincat-recon.pdf), [video](https://recon.cx/media-archive/2017/mtl/recon2017-mtl-05-philippe-biondi-xavier-mehrenberger-raphael-rigo-sarah-zennou-BinCAT-purrfecting-binary-static-analysis.mp4)\n\n## Licenses\n\nBinCAT is released under the [GNU Affero General Public\nLicence](https://www.gnu.org/licenses/agpl.html).\n\nThe BinCAT OCaml code includes code from the original Ocaml runtime, released\nunder the [LGPLv2](https://www.gnu.org/licenses/lgpl-2.0.txt).\n\nThe BinCAT IDA plugin includes code from\n[python-pyqt5-hexview](https://github.com/williballenthin/python-pyqt5-hexview)\nby Willi Ballenthin, released under the Apache License 2.0.\n\nBinCAT includes a modified copy of\n[newspeak](https://github.com/airbus-seclab/c2newspeak).\n\n## Automated builds\n\n### Windows\nAutomated builds are performed automatically (see\n[azure-pipelines.yml](azure-pipelines.yml)). The latest builds and test results\ncan be accessed [here](https://dev.azure.com/airbus-seclab/bincat/_build)\n\n### Linux\nAutomated builds are performed automatically using GitHub Actions (see\n[here](.github/workflows/linux-build-and-test.yaml)), results can be obtained\non GitHub's [Actions](https://github.com/airbus-seclab/bincat/actions) tab.\n"
  },
  {
    "projectUrl": "https://github.com/JusticeRage/Gepetto",
    "description": "IDA plugin which queries uses language models to speed up reverse-engineering",
    "longdescription": "# Gepetto\r\n\r\nGepetto is a Python script which uses various large language models to provide meaning to functions \r\ndecompiled by IDA Pro. At the moment, it can ask them to explain what a function does, and to automatically \r\nrename its variables. Here is a simple example of what results it can provide in mere seconds:\r\n\r\n![](https://github.com/JusticeRage/Gepetto/blob/main/readme/comparison.png?raw=true)\r\n\r\n## Setup\r\n\r\nSimply drop this script (`gepetto.py`, as well as the `gepetto/` folder) into your IDA plugins folder (`$IDAUSR/plugins`). \r\nBy default, on Windows, this should be `%AppData%\\Hex-Rays\\IDA Pro\\plugins` (you may need to create it).\r\n\r\nYou will need to add the required packages to IDA's Python installation for the script to work.\r\nFind which interpreter IDA is using by checking the following registry key: \r\n`Computer\\HKEY_CURRENT_USER\\Software\\Hex-Rays\\IDA` (default on Windows: `%LOCALAPPDATA%\\Programs\\Python\\Python39`).\r\nFinally, with the corresponding interpreter, simply run: \r\n\r\n```\r\n[/path/to/python] -m pip install -r requirements.txt\r\n```\r\n\r\n⚠️ You will also need to edit the configuration file (found as `gepetto/config.ini`) and add your own API keys. For \r\nOpenAI, it can be found on [this page](https://beta.openai.com/account/api-keys).\r\nPlease note that API queries are usually not free (although not very expensive) and you will need to set up a payment \r\nmethod with the corresponding provider.\r\n\r\n## Supported models\r\n\r\n- [OpenAI](https://playground.openai.com/)\r\n  - gpt-3.5-turbo-1106\r\n  - gpt-4-turbo\r\n  - gpt-4o (recommended for beginners)\r\n- [Groq](https://console.groq.com/playground)\r\n  -  llama3-70b-8192\r\n- [Together](https://api.together.ai/)\r\n  - mistralai/Mixtral-8x22B-Instruct-v0.1 (does not support renaming variables)\r\n\r\nAdding support for additional models shouldn't be too difficult, provided whatever provider you're considering exposes\r\nan API similar to OpenAI's. Look into the `gepetto/models` folder for inspiration, or open an issue if you can't figure\r\nit out. Also make sure you edit `ida/ui.py` to add the relevant menu entries for your addition.\r\n\r\n## Usage\r\n\r\nOnce the plugin is installed properly, you should be able to invoke it from the context menu of IDA's pseudocode window,\r\nas shown in the screenshot below:\r\n\r\n![](https://github.com/JusticeRage/Gepetto/blob/main/readme/usage.png?raw=true)\r\n\r\nSwitch between models supported by Gepetto from the Edit > Gepetto menu:\r\n\r\n![](https://github.com/JusticeRage/Gepetto/blob/main/readme/select_model.png?raw=true)\r\n\r\nYou can also use the following hotkeys:\r\n\r\n- Ask the model to explain the function: `Ctrl` + `Alt` + `H`\r\n- Request better names for the function's variables: `Ctrl` + `Alt` + `R`\r\n\r\nInitial testing shows that asking for better names works better if you ask for an explanation of the function first – I\r\nassume because the model then uses its own comment to make more accurate suggestions.\r\nThere is an element of randomness to the AI's replies. If for some reason the initial response you get doesn't suit you,\r\nyou can always run the command again.\r\n\r\n## Limitations\r\n\r\n- The plugin requires access to the HexRays decompiler to function.\r\n- All supported LLMs are general-purpose and may very well get things wrong! Always be \r\n  critical of results returned!\r\n\r\n## Translations\r\n\r\nYou can change Gepetto's language by editing the locale in the configuration. For instance, to use the plugin\r\nin French, you would simply add:\r\n\r\n```ini\r\n[Gepetto]\r\nLANGUAGE = \"fr_FR\"\r\n```\r\n\r\nThe chosen locale must match the folder names in `gepetto/locales`. If the desired language isn't available,\r\nyou can contribute to the project by adding it yourself! Create a new folder for the desired locale\r\n(ex: `gepetto/locales/de_DE/LC_MESSAGES/`), and open a new pull request with the updated `.po` file, which you can\r\ncreate by copying and editing `gepetto/locales/gepetto.pot` (replace all the lines starting with `msgstr` with the\r\nlocalized version).  \r\n\r\n## Acknowledgements\r\n\r\n- [OpenAI](https://openai.com), for making these incredible models, obviously\r\n- [Hex Rays](https://hex-rays.com/), the makers of IDA for their lightning fast support\r\n- [Kaspersky](https://kaspersky.com), for initially funding this project\r\n- [HarfangLab](https://harfanglab.io/), the current backer making this work possible\r\n- [@vanhauser-thc](https://github.com/vanhauser-thc) for contributing ideas of additional models and providers to support via his [fork](https://github.com/vanhauser-thc/gepetto/)\r\n- Everyone who contributed translations: @seifreed, @kot-igor, @ruzgarkanar, @orangetw\r\n"
  },
  {
    "projectUrl": "https://github.com/atredispartners/aidapal",
    "description": "aiDAPal is an IDA Pro plugin that uses a locally running LLM that has been fine-tuned for Hex-Rays pseudocode to assist with code analysis.",
    "longdescription": "# aiDAPal\n\n![aidapal](https://github.com/atredispartners/aidapal/assets/17786253/a3f5a964-3f27-4f9b-8cca-ed7a3e958f77)\n\naiDAPal is an IDA Pro plugin that uses a locally running LLM that has been fine-tuned for Hex-Rays pseudocode to assist with code analysis. Further details about this project can be found on our blog: https://atredis.com/blog/2024/6/3/how-to-train-your-large-language-model\n\nThis repository contains the IDA Pro plugin, the associated fine-tuned weights as well as training dataset can be downloaded from Hugging Face: https://huggingface.co/AverageBusinessUser/aidapal\n\n# Requirements / Setup\n## LLM Hosting/Service\nThis plugin uses Ollama's API for accessing the associated LLM - https://ollama.com/\n\nDownload the fine-tuned weights and Ollama modelfile:\n - Model https://huggingface.co/AverageBusinessUser/aidapal/blob/main/aidapal-8k.Q4_K_M.gguf\n - Ollama Modelfile: https://huggingface.co/AverageBusinessUser/aidapal/blob/main/aidapal.modelfile\n\nConfigure Ollama by running the following within the directory you downloaded the weights and modelfile:\n```\nollama create aidapal -f aidapal.modelfile\n```\n\nRunning `ollama list` should show an entry for `aidapal` after this step:\n```\n% ollama list\nNAME                       \tID          \tSIZE  \tMODIFIED\naidapal:latest             \td04d7b95027b\t4.4 GB\t2 months ago\n```\n## Python requirements\nThe plugin uses `requests` for HTTP requests to the API server - https://requests.readthedocs.io/en/latest/user/install/#install\n\nBy default the plugin uses the Ollama service running on the local host and is configured to use the `aidapal` weights, edit the plugin if either of these values should be different:\n\n```python\n# this list holds the list of models registered with Ollama to be accessible from the plugin.\nmodels = ['aidapal']\n# where ollama service is running\nollama_url = \"http://localhost:11434/api/generate\"\n```\n\n# Usage\nAfter loading the plugin, a new context menu is accessible from the Hex-Rays window that will initiate analysis:\n![image](https://github.com/atredispartners/aidapal/assets/17786253/5594b15c-6fd6-4585-b367-a076fe43ed34)\n\nWhen generation is complete, a results dialog will pop up, allowing you to accept or reject the results:\n\n![image](https://github.com/atredispartners/aidapal/assets/17786253/f27a7e55-b992-4c01-b353-f24f9bf11bd0)\n\nOnce accepted, the Hex-Rays output will be updated with your changes. A full example of this can be seen in the following screengrab:\n\n![simple_usage](https://github.com/atredispartners/aidapal/assets/17786253/3f3845e1-3641-4f8c-9279-18368bc93e2f)\n\nThe speed of generation is going to depend on the hardware you are executing on, the above example is representative of usage on ARM (Mx) based macbooks. \n\n\n\n\n\n"
  },
  {
    "projectUrl": "https://github.com/mandiant/capa/blob/master/capa/ida/plugin/README.md",
    "description": "capa/capa/ida/plugin/README.md at master · mandiant/capa",
    "longdescription": "![capa](https://github.com/mandiant/capa/blob/master/.github/logo.png)\n\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/flare-capa)](https://pypi.org/project/flare-capa)\n[![Last release](https://img.shields.io/github/v/release/mandiant/capa)](https://github.com/mandiant/capa/releases)\n[![Number of rules](https://gist.githubusercontent.com/capa-bot/6d7960e911f48b3b74916df8988cf0f3/raw/rules_badge.svg)](https://github.com/mandiant/capa-rules)\n[![CI status](https://github.com/mandiant/capa/workflows/CI/badge.svg)](https://github.com/mandiant/capa/actions?query=workflow%3ACI+event%3Apush+branch%3Amaster)\n[![Downloads](https://img.shields.io/github/downloads/mandiant/capa/total)](https://github.com/mandiant/capa/releases)\n[![License](https://img.shields.io/badge/license-Apache--2.0-green.svg)](LICENSE.txt)\n\ncapa detects capabilities in executable files.\nYou run it against a PE, ELF, .NET module, shellcode file, or a sandbox report and it tells you what it thinks the program can do.\nFor example, it might suggest that the file is a backdoor, is capable of installing services, or relies on HTTP to communicate.\n\nCheck out our capa blog posts:\n- [Dynamic capa: Exploring Executable Run-Time Behavior with the CAPE Sandbox](https://www.mandiant.com/resources/blog/dynamic-capa-executable-behavior-cape-sandbox)\n- [capa v4: casting a wider .NET](https://www.mandiant.com/resources/blog/capa-v4-casting-wider-net) (.NET support)\n- [ELFant in the Room – capa v3](https://www.mandiant.com/resources/elfant-in-the-room-capa-v3) (ELF support)\n- [capa 2.0: Better, Stronger, Faster](https://www.mandiant.com/resources/capa-2-better-stronger-faster)\n- [capa: Automatically Identify Malware Capabilities](https://www.mandiant.com/resources/capa-automatically-identify-malware-capabilities)\n\n```\n$ capa.exe suspicious.exe\n\n+------------------------+--------------------------------------------------------------------------------+\n| ATT&CK Tactic          | ATT&CK Technique                                                               |\n|------------------------+--------------------------------------------------------------------------------|\n| DEFENSE EVASION        | Obfuscated Files or Information [T1027]                                        |\n| DISCOVERY              | Query Registry [T1012]                                                         |\n|                        | System Information Discovery [T1082]                                           |\n| EXECUTION              | Command and Scripting Interpreter::Windows Command Shell [T1059.003]           |\n|                        | Shared Modules [T1129]                                                         |\n| EXFILTRATION           | Exfiltration Over C2 Channel [T1041]                                           |\n| PERSISTENCE            | Create or Modify System Process::Windows Service [T1543.003]                   |\n+------------------------+--------------------------------------------------------------------------------+\n\n+-------------------------------------------------------+-------------------------------------------------+\n| CAPABILITY                                            | NAMESPACE                                       |\n|-------------------------------------------------------+-------------------------------------------------|\n| check for OutputDebugString error                     | anti-analysis/anti-debugging/debugger-detection |\n| read and send data from client to server              | c2/file-transfer                                |\n| execute shell command and capture output              | c2/shell                                        |\n| receive data (2 matches)                              | communication                                   |\n| send data (6 matches)                                 | communication                                   |\n| connect to HTTP server (3 matches)                    | communication/http/client                       |\n| send HTTP request (3 matches)                         | communication/http/client                       |\n| create pipe                                           | communication/named-pipe/create                 |\n| get socket status (2 matches)                         | communication/socket                            |\n| receive data on socket (2 matches)                    | communication/socket/receive                    |\n| send data on socket (3 matches)                       | communication/socket/send                       |\n| connect TCP socket                                    | communication/socket/tcp                        |\n| encode data using Base64                              | data-manipulation/encoding/base64               |\n| encode data using XOR (6 matches)                     | data-manipulation/encoding/xor                  |\n| run as a service                                      | executable/pe                                   |\n| get common file path (3 matches)                      | host-interaction/file-system                    |\n| read file                                             | host-interaction/file-system/read               |\n| write file (2 matches)                                | host-interaction/file-system/write              |\n| print debug messages (2 matches)                      | host-interaction/log/debug/write-event          |\n| resolve DNS                                           | host-interaction/network/dns/resolve            |\n| get hostname                                          | host-interaction/os/hostname                    |\n| create a process with modified I/O handles and window | host-interaction/process/create                 |\n| create process                                        | host-interaction/process/create                 |\n| create registry key                                   | host-interaction/registry/create                |\n| create service                                        | host-interaction/service/create                 |\n| create thread                                         | host-interaction/thread/create                  |\n| persist via Windows service                           | persistence/service                             |\n+-------------------------------------------------------+-------------------------------------------------+\n```\n\n# download and usage\n\nDownload stable releases of the standalone capa binaries [here](https://github.com/mandiant/capa/releases). You can run the standalone binaries without installation. capa is a command line tool that should be run from the terminal.\n\nTo use capa as a library or integrate with another tool, see [doc/installation.md](https://github.com/mandiant/capa/blob/master/doc/installation.md) for further setup instructions.\n\nFor more information about how to use capa, see [doc/usage.md](https://github.com/mandiant/capa/blob/master/doc/usage.md).\n\n# example\n\nIn the above sample output, we ran capa against an unknown binary (`suspicious.exe`),\nand the tool reported that the program can send HTTP requests, decode data via XOR and Base64,\ninstall services, and spawn new processes.\nTaken together, this makes us think that `suspicious.exe` could be a persistent backdoor.\nTherefore, our next analysis step might be to run `suspicious.exe` in a sandbox and try to recover the command and control server.\n\nBy passing the `-vv` flag (for very verbose), capa reports exactly where it found evidence of these capabilities.\nThis is useful for at least two reasons:\n\n  - it helps explain why we should trust the results, and enables us to verify the conclusions, and\n  - it shows where within the binary an experienced analyst might study with IDA Pro\n\n```\n$ capa.exe suspicious.exe -vv\n...\nexecute shell command and capture output\nnamespace   c2/shell\nauthor      matthew.williams@mandiant.com\nscope       function\natt&ck      Execution::Command and Scripting Interpreter::Windows Command Shell [T1059.003]\nreferences  https://docs.microsoft.com/en-us/windows/win32/api/processthreadsapi/ns-processthreadsapi-startupinfoa\nfunction @ 0x4011C0\n  and:\n    match: create a process with modified I/O handles and window @ 0x4011C0\n      and:\n        number: 257 = STARTF_USESTDHANDLES | STARTF_USESHOWWINDOW @ 0x4012B8\n        or:\n          number: 68 = StartupInfo.cb (size) @ 0x401282\n        or: = API functions that accept a pointer to a STARTUPINFO structure\n          api: kernel32.CreateProcess @ 0x401343\n    match: create pipe @ 0x4011C0\n      or:\n        api: kernel32.CreatePipe @ 0x40126F, 0x401280\n    optional:\n      match: create thread @ 0x40136A, 0x4013BA\n        or:\n          and:\n            os: windows\n            or:\n              api: kernel32.CreateThread @ 0x4013D7\n        or:\n          and:\n            os: windows\n            or:\n              api: kernel32.CreateThread @ 0x401395\n    or:\n      string: \"cmd.exe\" @ 0x4012FD\n...\n```\n\nAdditionally, capa also supports analyzing [CAPE](https://github.com/kevoreilly/CAPEv2) sandbox reports for dynamic capability extraction.\nIn order to use this, you first submit your sample to CAPE for analysis, and then run capa against the generated report (JSON).\n\nHere's an example of running capa against a packed binary, and then running capa against the CAPE report of that binary:\n\n```yaml\n$ capa 05be49819139a3fdcdbddbdefd298398779521f3d68daa25275cc77508e42310.exe\nWARNING:capa.capabilities.common:--------------------------------------------------------------------------------\nWARNING:capa.capabilities.common: This sample appears to be packed.\nWARNING:capa.capabilities.common: \nWARNING:capa.capabilities.common: Packed samples have often been obfuscated to hide their logic.\nWARNING:capa.capabilities.common: capa cannot handle obfuscation well using static analysis. This means the results may be misleading or incomplete.\nWARNING:capa.capabilities.common: If possible, you should try to unpack this input file before analyzing it with capa.\nWARNING:capa.capabilities.common: Alternatively, run the sample in a supported sandbox and invoke capa against the report to obtain dynamic analysis results.\nWARNING:capa.capabilities.common: \nWARNING:capa.capabilities.common: Identified via rule: (internal) packer file limitation\nWARNING:capa.capabilities.common: \nWARNING:capa.capabilities.common: Use -v or -vv if you really want to see the capabilities identified by capa.\nWARNING:capa.capabilities.common:--------------------------------------------------------------------------------\n\n$ capa 05be49819139a3fdcdbddbdefd298398779521f3d68daa25275cc77508e42310.json\n\n┍━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑\n│ ATT&CK Tactic          │ ATT&CK Technique                                                                   │\n┝━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥\n│ CREDENTIAL ACCESS      │ Credentials from Password Stores T1555                                             │\n├────────────────────────┼────────────────────────────────────────────────────────────────────────────────────┤\n│ DEFENSE EVASION        │ File and Directory Permissions Modification T1222                                  │\n│                        │ Modify Registry T1112                                                              │\n│                        │ Obfuscated Files or Information T1027                                              │\n│                        │ Virtualization/Sandbox Evasion::User Activity Based Checks T1497.002               │\n├────────────────────────┼────────────────────────────────────────────────────────────────────────────────────┤\n│ DISCOVERY              │ Account Discovery T1087                                                            │\n│                        │ Application Window Discovery T1010                                                 │\n│                        │ File and Directory Discovery T1083                                                 │\n│                        │ Query Registry T1012                                                               │\n│                        │ System Information Discovery T1082                                                 │\n│                        │ System Location Discovery::System Language Discovery T1614.001                     │\n│                        │ System Owner/User Discovery T1033                                                  │\n├────────────────────────┼────────────────────────────────────────────────────────────────────────────────────┤\n│ EXECUTION              │ System Services::Service Execution T1569.002                                       │\n├────────────────────────┼────────────────────────────────────────────────────────────────────────────────────┤\n│ PERSISTENCE            │ Boot or Logon Autostart Execution::Registry Run Keys / Startup Folder T1547.001    │\n│                        │ Boot or Logon Autostart Execution::Winlogon Helper DLL T1547.004                   │\n│                        │ Create or Modify System Process::Windows Service T1543.003                         │\n┕━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙\n\n┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑\n│ Capability                                           │ Namespace                                            │\n┝━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥\n│ check for unmoving mouse cursor (3 matches)          │ anti-analysis/anti-vm/vm-detection                   │\n│ gather bitkinex information                          │ collection/file-managers                             │\n│ gather classicftp information                        │ collection/file-managers                             │\n│ gather filezilla information                         │ collection/file-managers                             │\n│ gather total-commander information                   │ collection/file-managers                             │\n│ gather ultrafxp information                          │ collection/file-managers                             │\n│ resolve DNS (23 matches)                             │ communication/dns                                    │\n│ initialize Winsock library (7 matches)               │ communication/socket                                 │\n│ act as TCP client (3 matches)                        │ communication/tcp/client                             │\n│ create new key via CryptAcquireContext               │ data-manipulation/encryption                         │\n│ encrypt or decrypt via WinCrypt                      │ data-manipulation/encryption                         │\n│ hash data via WinCrypt                               │ data-manipulation/hashing                            │\n│ initialize hashing via WinCrypt                      │ data-manipulation/hashing                            │\n│ hash data with MD5                                   │ data-manipulation/hashing/md5                        │\n│ generate random numbers via WinAPI                   │ data-manipulation/prng                               │\n│ extract resource via kernel32 functions (2 matches)  │ executable/resource                                  │\n│ interact with driver via control codes (2 matches)   │ host-interaction/driver                              │\n│ get Program Files directory (18 matches)             │ host-interaction/file-system                         │\n│ get common file path (575 matches)                   │ host-interaction/file-system                         │\n│ create directory (2 matches)                         │ host-interaction/file-system/create                  │\n│ delete file                                          │ host-interaction/file-system/delete                  │\n│ get file attributes (122 matches)                    │ host-interaction/file-system/meta                    │\n│ set file attributes (8 matches)                      │ host-interaction/file-system/meta                    │\n│ move file                                            │ host-interaction/file-system/move                    │\n│ find taskbar (3 matches)                             │ host-interaction/gui/taskbar/find                    │\n│ get keyboard layout (12 matches)                     │ host-interaction/hardware/keyboard                   │\n│ get disk size                                        │ host-interaction/hardware/storage                    │\n│ get hostname (4 matches)                             │ host-interaction/os/hostname                         │\n│ allocate or change RWX memory (3 matches)            │ host-interaction/process/inject                      │\n│ query or enumerate registry key (3 matches)          │ host-interaction/registry                            │\n│ query or enumerate registry value (8 matches)        │ host-interaction/registry                            │\n│ delete registry key                                  │ host-interaction/registry/delete                     │\n│ start service                                        │ host-interaction/service/start                       │\n│ get session user name                                │ host-interaction/session                             │\n│ persist via Run registry key                         │ persistence/registry/run                             │\n│ persist via Winlogon Helper DLL registry key         │ persistence/registry/winlogon-helper                 │\n│ persist via Windows service (2 matches)              │ persistence/service                                  │\n┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙\n```\n\ncapa uses a collection of rules to identify capabilities within a program.\nThese rules are easy to write, even for those new to reverse engineering.\nBy authoring rules, you can extend the capabilities that capa recognizes.\nIn some regards, capa rules are a mixture of the OpenIOC, Yara, and YAML formats.\n\nHere's an example rule used by capa:\n\n```yaml\nrule:\n  meta:\n    name: create TCP socket\n    namespace: communication/socket/tcp\n    authors:\n      - william.ballenthin@mandiant.com\n      - joakim@intezer.com\n      - anushka.virgaonkar@mandiant.com\n    scopes:\n      static: basic block\n      dynamic: call\n    mbc:\n      - Communication::Socket Communication::Create TCP Socket [C0001.011]\n    examples:\n      - Practical Malware Analysis Lab 01-01.dll_:0x10001010\n  features:\n    - or:\n      - and:\n        - number: 6 = IPPROTO_TCP\n        - number: 1 = SOCK_STREAM\n        - number: 2 = AF_INET\n        - or:\n          - api: ws2_32.socket\n          - api: ws2_32.WSASocket\n          - api: socket\n      - property/read: System.Net.Sockets.TcpClient::Client\n```\n\nThe [github.com/mandiant/capa-rules](https://github.com/mandiant/capa-rules) repository contains hundreds of standard library rules that are distributed with capa.\nPlease learn to write rules and contribute new entries as you find interesting techniques in malware.\n\nIf you use IDA Pro, then you can use the [capa explorer](https://github.com/mandiant/capa/tree/master/capa/ida/plugin) plugin.\ncapa explorer helps you identify interesting areas of a program and build new capa rules using features extracted directly from your IDA Pro database.\n\n![capa + IDA Pro integration](https://github.com/mandiant/capa/blob/master/doc/img/explorer_expanded.png)\n\nIf you use Ghidra, then you can use the [capa + Ghidra integration](/capa/ghidra/) to run capa's analysis directly on your Ghidra database and render the results in Ghidra's user interface.\n\n<img src=\"https://github.com/mandiant/capa/assets/66766340/eeae33f4-99d4-42dc-a5e8-4c1b8c661492\" width=300>\n\n# further information\n## capa\n- [Installation](https://github.com/mandiant/capa/blob/master/doc/installation.md)\n- [Usage](https://github.com/mandiant/capa/blob/master/doc/usage.md)\n- [Limitations](https://github.com/mandiant/capa/blob/master/doc/limitations.md)\n- [Contributing Guide](https://github.com/mandiant/capa/blob/master/.github/CONTRIBUTING.md)\n\n## capa rules\n- [capa-rules repository](https://github.com/mandiant/capa-rules)\n- [capa-rules rule format](https://github.com/mandiant/capa-rules/blob/master/doc/format.md)\n\n## capa testfiles\nThe [capa-testfiles repository](https://github.com/mandiant/capa-testfiles) contains the data we use to test capa's code and rules\n"
  },
  {
    "projectUrl": "https://github.com/joydo/d810",
    "description": "GitHub - joydo/d810",
    "longdescription": "# Introduction\n\n## What is D-810\n\nD-810 is an IDA Pro plugin which can be used to deobfuscate code at decompilation time by modifying IDA Pro microcode.\nIt was designed with the following goals in mind:\n\n* It should have as least as possible impact on our standard reverse engineering workflow\n    * Fully integrated to IDA Pro\n* It should be easily extensible and configurable\n    * Fast creation of new deobfuscation rules\n    * Configurable so that we don't have to modify the source code to use rules for a specific project\n* Performance impact should be reasonable\n    * Our goal is to be transparent for the reverse engineer \n    * But we don't care if  the decompilation of a function takes 1 more second if the resulting code is much more simplier.\n\n\n# Installation\n\n**Only IDA v7.5 or later is supported with Python 3.7 and higher** (since we need the microcode Python API) \n\nCopy this repository in `.idapro/plugins`\n\nWe recommend to install Z3 to be able to use several features of D-810:\n```bash\npip3 install z3-solver \n```\n\n# Using D-810\n\n* Load the plugin by using the `Ctrl-Shift-D` shortcut, you should see this configuration GUI\n\n![](d810/docs/source/images/gui_plugin_configuration.png)\n\n* Choose or create your project configuration\n  * If you are not sure what to do here, leave *default_instruction_only.json*. \n* Click on the `Start` button to enable deobfuscation\n* Decompile an obfuscated function, the code should be simplified (hopefully)\n* When you want to disable deobfuscation, just click on the `Stop` button.\n\n# Warnings\n\nThis plugin is still in early stage of development, so issues ~~may~~ will happen.\n\n * Modifying incorrectly IDA microcode may lead IDA to crash. We try to detect that as much as possible to avoid crash, but since it may still happen **save you IDA database often**\n * We only tested this plugin on Linux, but it should work on Windows too.\n\n# Documentation\n\nWork in progress\n\nCurrently, you can read our [blog post](https://eshard.com/posts/) to get some  information.\n\n\n# Licenses\n\nThis library is licensed under LGPL V3 license. See the [LICENSE](LICENSE) file for details.\n\n## Authors\n\nSee [AUTHORS](AUTHORS.md) for the list of contributors to the project.\n\n# Acknowledgement\n\nRolf Rolles for the huge work he has done with his [HexRaysDeob plugin](https://github.com/RolfRolles/HexRaysDeob) and all the information about Hex-Rays microcode internals described in his [blog post](https://www.hex-rays.com/blog/hex-rays-microcode-api-vs-obfuscating-compiler/). We are still using some part of his plugin in D-810.\n\nDennis Elser for the [genmc plugin](https://github.com/patois/genmc) plugin which was very helpful for debugging D-810 errors.\n"
  },
  {
    "projectUrl": "https://github.com/danigargu/deREferencing",
    "description": "IDA Pro plugin that implements more user-friendly register and stack views",
    "longdescription": "# deREferencing\n\n [![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n\ndeReferencing is an IDA Pro plugin that implements new registers and stack views. Adds dereferenced pointers, colors and other useful information, similar to some GDB plugins (e.g: PEDA, GEF, pwndbg, etc).\n\nSupports following architectures: **x86, x86-64, ARM, ARM64, MIPS32 and MIPS64**\n\n## Requirements\n\n* IDA-Pro >= 7.1\n\n## Install\n\nJust drop the `dereferencing.py` file and the `dereferencing` folder into IDA's plugin directory.\n\nTo install just for the current user, copy the files into one of these directories:\n\n| OS          | Plugin path                          |\n| ----------- | ------------------------------------ |\n| Linux/macOS | `~/.idapro/plugins`                  |\n| Windows     | `%AppData%\\Hex-Rays\\IDA Pro\\plugins` |\n\n## Usage\n\nBoth views can be opened from the menu `Debugger -> Debugger Windows` or by shortcuts:\n\n* deREferencing - Registers (`Alt-Shift-D`)\n* deREferencing - Stack (`Alt-Shift-E`)\n\nYou also can save the desktop layout using the `Windows -> Save desktop` option, so that the plugin starts automatically in other debugging sessions.\n\n## Configuration\n\nConfig options can be modified vía `deferencing/config.py` file.\n\n### Snapshots\n\n### Registers view\n\n![registers](https://user-images.githubusercontent.com/1675387/64848469-925f0680-d611-11e9-8418-06c5354894be.png)\n\n### Stack view\n\n![stack](https://user-images.githubusercontent.com/1675387/64848678-144f2f80-d612-11e9-8cb1-f3f3a837b267.png)\n\n## Thanks\n\nSpecial mention to my colleague [@roman_soft](https://twitter.com/roman_soft) for give me some ideas during the development of the plugin.\n\n## Bugs / Feedback / PRs\n\nAny comment, issue or pull request will be highly appreciated :-)\n\n## Author\n\n* Daniel García Gutiérrez - @danigargu\n"
  },
  {
    "projectUrl": "https://github.com/fox-it/mkYARA",
    "description": "Generating YARA rules based on binary code",
    "longdescription": "# mkYARA\nWriting YARA rules based on executable code within malware can be a tedious task. An analyst cannot simply copy and paste raw executable code into a YARA rule, because this code contains variable values, such as memory addresses and offsets. The analyst has to disassemble the code and wildcard all the pieces in the code that can change between samples. mkYARA aims to automate this part of writing rules by generating executable code signatures that wildcard all these little pieces of executable code that are not static.\n\n## Installation\nInstallation is as easy as installing the pip package.\n``` \npip install mkyara\n```\n\n## Usage\n```python\nimport codecs\nfrom capstone import CS_ARCH_X86, CS_MODE_32\nfrom mkyara import YaraGenerator\n\ngen = YaraGenerator(\"normal\", CS_ARCH_X86, CS_MODE_32)\ngen.add_chunk(b\"\\x90\\x90\\x90\", offset=1000)\ngen.add_chunk(codecs.decode(\"6830800000E896FEFFFFC3\", \"hex\"), offset=0x100)\ngen.add_chunk(b\"\\x90\\x90\\x90\\xFF\\xD7\", is_data=True)\nrule = gen.generate_rule()\nrule_str = rule.get_rule_string()\nprint(rule_str)\n```\n\n## Standalone Tool\nmkYARA comes with a standalone tool that is cross platform, as in, it can create signatures for Windows binaries running under Linux. \n\n```commandline\nusage: mkyara [-h] [-i {x86}] [-a {32,64,x86,x64}] -f FILE_PATH [-n RULENAME]\n              -o OFFSET -s SIZE [-m {loose,normal,strict}] [-r RESULT] [-v]\n\nGenerate a Yara rule based on disassembled code\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -i {x86}, --instruction_set {x86}\n                        Instruction set\n  -a {32,64,x86,x64}, --instruction_mode {32,64,x86,x64}\n                        Instruction mode\n  -f FILE_PATH, --file_path FILE_PATH\n                        Sample file path\n  -n RULENAME, --rulename RULENAME\n                        Generated rule name\n  -o OFFSET, --offset OFFSET\n                        File offset for signature\n  -s SIZE, --size SIZE  Size of desired signature\n  -m {loose,normal,strict}, --mode {loose,normal,strict}\n                        Wildcard mode for yara rule generation\n                        loose = wildcard all operands\n                        normal = wildcard only displacement operands\n                        strict = wildcard only jmp/call addresses\n  -r RESULT, --result RESULT\n                        Output file\n  -v, --verbose         Increase verbosity\n\n```\n![](./img/mkyara-tool.png)\n\n## IDA Plugin\nmkYARA comes with a IDA plugin to easily create YARA signatures by selecting a set of instructions and choosing one of the mkYARA -> Generate YARA rule options. Installation is as easy as installing the pip package and copying the mkyara_plugin.py to your IDA plugin directory.\n\n\n![](./img/mkyara.gif)"
  },
  {
    "projectUrl": "https://github.com/interruptlabs/heimdallr-ida",
    "description": "A IDA plugin to enable linking to locations in an IDB with a disas:// URI",
    "longdescription": "# Introduction \r\n\r\n**BETA SUPPORT ONLY - MAC OS SUPPORT ONLY**\r\n\r\nThe Heimdallr IDA plugin exposes a localhost gRPC server for each IDA instances which allows the [Heimdallr client](https://github.com/interruptlabs/heimdallr-client) to navigate to locations in IDA.\r\n\r\n# Installation\r\n\r\n\r\n1. Install `heimdallr-ida` with pip ([ensure the pip you are using matches the python environment IDA is using](#IDA-doesnt-pick-up-dependencies))\r\n    - Using git directly `pip3 install -e git+https://git@github.com/interruptlabs/heimdallr-ida.git#egg=heimdallr_ida`\r\n    - From a cloned repo `pip3 install -e .`\r\n2. Launch IDA and enter the following into the console\r\n```\r\nimport heimdallr\r\nheimdallr.install()\r\n```\r\n3. Relaunch IDA and verify gRPC server sucessfully started up. You should something like the following in the output console:\r\n```\r\n[Heimdallr RPC] Plugin version 0.0.1\r\nStarting server on 127.0.0.1:51278\r\nWrote {\"pid\": 36813, \"address\": \"127.0.0.1:51278\", \"file_name\": \"example.i64\", \"file_hash\": \"b058de795064344a4074252e15b9fd39\"} to /Users/roberts/.idapro/heimdallr/36813\r\n```\r\n4. Install [heimdallr-client](https://github.com/interruptlabs/heimdallr-client)\r\n\r\n# Usage\r\n\r\nYou should now be able to open disas:// URIs from anywhere in the system. This could be a Slack DM, a Confluence page, or a Obsidian note. The format is as follows (these):\r\n`disas://example.i64%3Foffset%3D0x1002315b6%26hash%3Db058de795064344a4074252e15b9fd39%26view%3Ddisasm`\r\nThese are automatically generated by creating a note in the `heimdallr_ida` plugin\r\n\r\nThe search behaviour for a relevant IDB is as follows:\r\n1. Search for an open IDA instance with this database already open\r\n2. Search IDA recently open files for the location of the database\r\n3. Search your `idb_path` for matching files\r\n\r\nThe search pattern is used to ensure links can be used easily within a team - so long as you have a database based on the same source file and is named the same.\r\n\r\nIDBs are matched by both the database name and source file hash. As such **changing the database name will cause URIs to no longer be valid**. \r\n\r\nYou can make notes by highlighting the area of text in IDA you want to copy and pressing \"Ctrl+Shift+N\". The text will be added to a code block with a link back to where it came from and added to your clipboard.\r\n\r\nIf you want to make a link to share with someone else, pressing \"Ctrl+Alt+N\", and the link to where you are in IDA will be added.\r\n\r\nThis currently only works for the Disassembly and Pseudocode views.\r\n\r\n# Ghidra Cross Compatabiltity\r\n\r\nThe wonderful people over at Foundry Zero have created a Ghidra plugin which offers the same functionality. You can get it [here](https://github.com/foundryzero/ghidra-deep-links)\r\n\r\nThe plugins are compatible, meaning links created with their plugin can be opened in IDA with this client, and vice versa. This allows you to collaborate with other researchers regardless of the disassembler you use!\r\n\r\n# Common Issues\r\n\r\n## IDA doesn't pick up dependencies\r\n\r\nThe version of Python IDA is using can be different from that of your system. To verify the version of python you are using you can put the following in the IDA Python console.\r\n```\r\nPython>import os\r\nPython>os.__file__\r\n'/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/lib/python3.9/os.py'\r\n```\r\nAnd doing the same in the terminal\r\n```\r\nroberts@RobertS-IL-Mac Documents % python3 -q\r\n>>> import os\r\n>>> os.__file__\r\n'/opt/homebrew/Cellar/python@3.10/3.10.8/Frameworks/Python.framework/Versions/3.10/lib/python3.10/os.py'\r\n```\r\n\r\nFrom here you can either update IDA to match with:\r\n`/Applications/IDA\\ Core\\ 8.1/idabin/idapyswitch`\r\n\r\nOr install the packages into the releveant python enviroment by using the path from IDA:\r\n`/Library/Developer/CommandLineTools/Library/Frameworks/Python3.framework/Versions/3.9/bin/python3 -m pip install -e  git+ssh://git@github.com/interruptlabs/heimdallr-ida.git#egg=heimdallr_ida`\r\n"
  },
  {
    "projectUrl": "https://github.com/NeatMonster/AMIE",
    "description": "A Minimalist Instruction Extender for the ARM architecture and IDA Pro",
    "longdescription": "# AMIE\n\n**A** **M**inimalist **I**nstruction **E**xtender\n\nAMIE is a Python rework of [FRIEND](https://github.com/alexhude/FRIEND/) that focuses solely on the ARM architecture (only AArch32 and AArch64 are supported). It is both lightweight and dependency-free, and provides the most relevant and up-to-date information about the ARM system registers and instructions.\n\n## Features\n\n### Improved processor modules\n\nFor `MCR/MRC` and `MCRR/MRCC` instructions on AArch32, and for `MSR/MRS` and `SYS` instructions on AArch64, the system register encoding is detected and replaced by its user-friendly name in the *IDA View* subview.\n\n<p align=\"center\"><img src=\"https://i.imgur.com/OOhEgpf.gif\"></p>\n\nFor `MCR/MRC` and `MSR/MRS` instructions, it also applies to the *Pseudocode* subview.\n\n<p align=\"center\"><img src=\"https://i.imgur.com/ekYV1hZ.png\"></p>\n\n### Hints for instructions and registers\n\nHovering over a system register in the *IDA View* subview or in the *Pseudocode* subview will display a summary (usually kept under 30 lines) of the relevant documentation page, including the bitfield when available.\n\n<p align=\"center\"><img src=\"https://i.imgur.com/GK0G8EG.png\"></p>\n\nHovering over an instruction mnemonic in the *IDA View* subview or in the *Pseudocode* subview will also display a summary of the relevant documentation page, and the relevant assembly template when available.\n\n<p align=\"center\"><img src=\"https://i.imgur.com/S88dDBy.png\"></p>\n\n### Auto-generated resource files\n\nThe biggest difference with FRIEND is that the resource files (`aarch32.json` and `aarch64.json`) are auto-generated from the [Exploration Tools](https://developer.arm.com/products/architecture/cpu-architecture/a-profile/exploration-tools). The system registers and instructions (documentation and encodings) are extracted by a home-made script that parses the ARM-provided XML files.\n\n## Installation\n\nCopy the plugin file `amie.py`, and its resource files `aarch32.json` and `aarch64.json` to your plugins directory or your user plugins directory (if you want to share it between multiple IDA Pro versions). These are the default paths:\n\nOS      | Plugins Directory                          | User Plugins Directory\n--------|--------------------------------------------|-------------------------------------\nWindows | `%PROGRAMFILES%\\IDA 7.4\\plugins`           | `%APPDATA%\\Hex-Rays\\IDA Pro\\plugins`\nLinux   | `~/ida-7.4/plugins`                        | `~/.idapro/plugins`\nmacOS   | `/Applications/IDA Pro 7.4/idabin/plugins` | `~/.idapro/plugins`\n\n## Dependencies\n\nThere are no dependencies! :-)\n\n## Improvements\n\nSupport for implementation-defined system registers is not available yet.\n\nThere is no Hex-Rays support for `MCRR/MRRC` as this is an IDA Pro limitation.\n\n## Credits\n\n* [alexhude](https://github.com/alexhude) for creating the [FRIEND](https://github.com/alexhude/FRIEND/) plugin;\n* [gdelugre](https://github.com/gdelugre/) for creating the [ida-arm-system-highlight](https://github.com/gdelugre/ida-arm-system-highlight/) script;\n* The good folks at ARM for releasing the [Exploration Tools](https://developer.arm.com/products/architecture/cpu-architecture/a-profile/exploration-tools);\n* [patateqbool](https://github.com/patateqbool) and [0xpanda](https://github.com/0xpanda) for testing the plugin and reporting bugs;\n* Quarkslab for allowing this release.\n"
  },
  {
    "projectUrl": "https://github.com/herosi/classinformer-ida8",
    "description": "IDA Class Informer plugin for IDA 8.x",
    "longdescription": "# classinformer-ida8\nIDA Class Informer plugin for IDA 8.x\n\nChangelog from the original [IDA ClassInformer PlugIn v2.6](https://sourceforge.net/projects/classinformer/)\n- Updated to IDA SDK 8.2 and MSVC 2019\n- Updated the plugin form to the new one to work with IDA SDK 8.2\n- Created a plugin to analyze PE32 on IDA 64 (IDA_ClassInformer_PlugIn3264.dlL) because IDA is currently stopping to use IDA for 32-bit.\n- Linked VC++ runtime statically (/MT*)\n\n## Download\n- You can download compiled binaries from the [Releases](../../releases) section.\n"
  },
  {
    "projectUrl": "https://github.com/patois/genmc",
    "description": "Display Hex-Rays Microcode",
    "longdescription": "# genmc - Display Hex-Rays Microcode\n\ngenmc is an IDAPython script/plugin hybrid that displays Hexrays decompiler\nmicrocode, which can help in developing microcode plugins.\n\n![genmc animated gif](/rsrc/genmc.gif?raw=true)\n\n## Installation / Usage\nBy running the code as a script within IDA, a Python shell command becomes\navailable which, after typing \"install_plugin()\", copies the script to\n$HOME/.idapro/plugins or %APPDATA%Hex-Rays/IDA Pro/plugins.\n\nWith the script installed into the plugins folder, it can be invoked from\nthe plugins menu or by using the hotkey 'Ctrl-Shift-M'.\n\nIDA and decompilers >= 7.3 are required.\n\nThis IDAPython project is compatible with Python3. For compatibility with older versions of IDA, you may want to check out the Python2 branch of this project.\n\n## Keyboard shortcuts/modifiers:\nWith the microcode viewer focussed:\n\n- 'g': display microcode graph\n- 'i': display graph for current micro-instruction\n- 'Shift': holding this modifier will create floating graph widgets (instead of using the default docking behavior)\n\n## Credits:\n- https://github.com/RolfRolles/ for his Microcode Explorer plugin whose original ideas and code this script is heavily based on (https://github.com/RolfRolles/HexRaysDeob). Full credit for most of the code and ideas in its original form belongs to Rolf. Check out his related blog post on Hexblog: http://www.hexblog.com/?p=1248 \n- https://github.com/NeatMonster/ for porting of the Microcode Explorer C++ code to IDAPython using ctypes when Python bindings for HexRays' microcode were not available yet (https://github.com/NeatMonster/MCExplorer).\n- https://github.com/icecr4ck/ for porting MCExplorer for IDAPython from 7.x to 7.3\n\nPlease consider using [Lucid - An Interactive Hex-Rays Microcode Explorer](https://github.com/gaasedelen/lucid), instead!\n"
  },
  {
    "projectUrl": "https://github.com/REhints/HexRaysCodeXplorer",
    "description": "Hex-Rays Decompiler plugin for better code navigation",
    "longdescription": "<pre>\n _   _          ______                _____           _     __   __      _                     \n| | | |         | ___ \\              /  __ \\         | |    \\ \\ / /     | |                    \n| |_| | _____  _| |_/ /__ _ _   _ ___| /  \\/ ___   __| | ___ \\ V / _ __ | | ___  _ __ ___ _ __ \n|  _  |/ _ \\ \\/ /    // _` | | | / __| |    / _ \\ / _` |/ _ \\/   \\| '_ \\| |/ _ \\| '__/ _ \\ '__|\n| | | |  __/>  <| |\\ \\ (_| | |_| \\__ \\ \\__/\\ (_) | (_| |  __/ /^\\ \\ |_) | | (_) | | |  __/ |   \n\\_| |_/\\___/_/\\_\\_| \\_\\__,_|\\__, |___/\\____/\\___/ \\__,_|\\___\\/   \\/ .__/|_|\\___/|_|  \\___|_|   \n                             __/ |                                | |                          \n                            |___/                                 |_|</pre>\n============================================================================\n\n[![License: GPL v3](https://img.shields.io/badge/License-GPL%20v3-blue.svg)](http://www.gnu.org/licenses/gpl-3.0)\n[![Code Climate](https://codeclimate.com/github/REhints/HexRaysCodeXplorer/badges/gpa.svg)](https://codeclimate.com/github/REhints/HexRaysCodeXplorer)\n[![Issue Count](https://codeclimate.com/github/REhints/HexRaysCodeXplorer/badges/issue_count.svg)](https://codeclimate.com/github/REhints/HexRaysCodeXplorer)\n\nThe Hex-Rays Decompiler plugin for better code navigation in RE process. CodeXplorer automates code REconstruction of C++ applications or modern malware like Stuxnet, Flame, Equation, Animal Farm ... :octocat:\n\nThe CodeXplorer plugin is one of the [first publicly available](https://www.hex-rays.com/products/decompiler/manual/third_party.shtml) Hex-Rays Decompiler plugins. We keep updated this project [since summer of 2013](https://www.hex-rays.com/contests/2013/) and continue contributing new features frequently. Also most interesting feutures of CodeXplorer have been presented on numerous security conferences like: REcon, ZeroNights, H2HC, NSEC and BHUS :space_invader:\n\n__Contributors__: \n\nAlex Matrosov ([@matrosov](https://github.com/matrosov))\n\nEugene Rodionov ([@rodionov](https://github.com/rodionov)) \n\nRodrigo Branco ([@rrbranco](https://github.com/rrbranco))\n\nGabriel Barbosa ([@gabrielnb](https://github.com/gabrielnb))\n\n__Supported versions of Hex-Rays products:__ everytime we focus on last versions of IDA and Decompiler because trying to use new interesting features in new SDK releases. It's also mean we tested just on last versions of Hex-Rays products and not guaranteed stable work on previous ones. \n\n__Why not IdaPython:__ all code developed on C/C++ because it's more stable way to support complex plugin for Hex-Rays Decompiler.\n\n__Supported Platforms:__ x86/x64 for Win, Linux and Mac.\n\n__HexRaysCodeXplorer__ - Hex-Rays Decompiler plugin for easier code navigation. Right-click context menu in the Pseudocode window shows CodeXplorer plugin commands: \n\n![1](img/1.jpg)\n\n:gem: __Here are the main features of the CodeXplorer plugin:__ :gem:\n\n* ***Automatic type REconstruction*** for C++ objects. To be able to reconstruct a type using HexRaysCodeXplorer one needs to select the variable holding pointer to the instance of position independed code or to an object and by right-button mouse click select from the context menu «REconstruct Type» option:\n\n![2](img/2.png)\n\nThe reconstructed structure is displayed in “Output window”. Detailed information about type Reconstruction feature is provided in the blog post “[Type REconstruction in HexRaysCodeXplorer](http://rehints.com/2013-09-02-Type-REconstruction-in-HexRaysCodeXplorer.html)”.\n\nAlso CodeXplorer plugin supports auto REconstruction type into IDA local types storage.\n\n![6](img/6.png)\n\n* ***Virtual function table identification***  - automatically identifies references to virtual function tables during type reconstruction. When a reference to a virtual function table is identified the plugin generates a corresponding C-structure. As shown below during reconstructing `struct_local_data_storage` two virtual function tables were identified and, as a result, two corresponding structures were generated: `struct_local_data_storage_VTABLE_0` and `struct_local_data_storage_VTABLE_4`.\n\n![12](img/12.png)\n  \n* ***C-tree graph visualization*** – a special tree-like structure representing a decompiled routine in citem_t terms (hexrays.hpp). Useful feature for understanding how the decompiler works. The highlighted graph node corresponds to the current cursor position in the HexRays Pseudocode window:\n\n![3](img/3.png)\n\n* ***Ctree Item View*** – show ctree representation for highlighted element:\n\n![16](img/16.PNG)\n\n* ***Extract Ctrees to File*** – dump calculate SHA1 hash and dump all ctrees to file. \n\n![14](img/14.PNG)\n\n* ***Extract Types to File*** – dump all types information (include reconstructed types) into file.\n\n* ***Navigation through virtual function calls*** in HexRays Pseudocode window. After representing C++ objects by C-structures this feature make possible navigation by mouse clicking to the virtual function calls as structure fields:\n\n![4](img/4.png)\n\n* ***Jump to Disasm*** - small feature for navigate to assembly code into \"IDA View window\" from current Pseudocode line position. It is help to find a place in assembly code associated with decompiled line. \n\n![8](img/8.png)\n\n* ***Object Explorer*** – useful interface for navigation through virtual tables (VTBL) structures. Object Explorer outputs VTBL information into IDA custom view window. The output window is shown by choosing «Object Explorer» option in right-button mouse click context menu:\n\n![5](img/5.png)\n\n__Object Explorer supports following features:__\n* Auto structures generation for VTBL into IDA local types\n\n* Navigation in virtual table list and jump to VTBL address into \"IDA View\" window by click\n\n* Show hints for current position in virtual table list\n\n* Shows cross-references list by click into menu on \"Show XREFS to VTBL\"\n\n![11](img/11.png)\n\n* Support auto parsing RTTI objects:\n\n![13](img/13.png)\n\n__The Batch mode contains following features:__\n\n* Batch mode - useful feature to use CodeXplorer for processing multiple files without any interaction from user. We add this feature after Black Hat research in 2015 for processing 2 millions samples.\n\n```\nExample (dump types and ctrees for functions with name prefix \"crypto_\"):\nidaq.exe -OHexRaysCodeXplorer:dump_types:dump_ctrees:CRYPTOcrypto_path_to_idb\n```\n\n__Compiling__:\n\n***Windows***: \n* Open the solution in Visual Studio\n* Open file `src/HexRaysCodeXplorer/PropertySheet.props` in notepad(++) and update values of `IDADIR` and `IDASDK` paths to point to IDA installation path and IDA7 SDK path accordingly. HexRays SDK should be in `$IDADIR\\plugins\\hexrays_sdk` (like by default)\n* Build `Release | x64` and `Release x64 | x64` configurations\n\n***Linux***:\n* cd src/HexRaysCodeXplorer/\n* IDA_DIR=<PATH_TO_IDA> IDA_SDK=<PATH_TO_IDA_SDK> EA64=0 make -f makefile.lnx\n* IDA_DIR=<PATH_TO_IDA> IDA_SDK=<PATH_TO_IDA_SDK> EA64=0 make -f makefile.lnx install\n  \n***Mac***:\n* cd src/HexRaysCodeXplorer/\n* IDA_DIR=<PATH_TO_IDA> IDA_SDK=<PATH_TO_IDA_SDK> make -f makefile.mac\n* The Mac makefile might need some hand editing, pull requests welcome!\n* IDA 7.0 `.pmc` file extension should be `.dylib`\n* bash$ `export IDA_DIR=\"/Applications/IDA\\ Pro\\ 7.0/ida.app/Contents/MacOS\" && export IDA_SDK=\"/Applications/IDA\\ Pro\\ 7.0/ida.app/Contents/MacOS/idasdk\" && make -f makefile7.mac`\n* Or open project in Xcode `HexRaysCodeXplorer.xcodeproj`\n\n***With CMake***:\n* cd src/HexRaysCodeXplorer/\n* mkdir build && cd build\n* cmake .. -DIdaSdk_ROOT_DIR=<PATH_TO_IDA_SDK> -DHexRaysSdk_ROOT_DIR=<PATH_TO_HEXRAYS_SDK>\n* cmake --build . --config Release\n\n============================================================================\n\n__Conference talks about CodeXplorer plugin:__\n* **2015**\n * \"Distributing the REconstruction of High-Level IR for Large Scale Malware Analysis\", BHUS [[slides]](https://github.com/REhints/Publications/blob/master/Conferences/BH'2015/BH_2015.pdf) \n * \"Object Oriented Code RE with HexraysCodeXplorer\", NSEC [[slides]](https://github.com/REhints/Publications/raw/master/Conferences/Nsec'2015/nsec_2015.pdf)\n* **2014**\n * \"HexRaysCodeXplorer: object oriented RE for fun and profit\", H2HC [[slides]](https://github.com/REhints/Publications/blob/master/Conferences/ZeroNights'2013/ZN_2013_pdf.pdf)\n* **2013**\n * \"HexRaysCodeXplorer: make object-oriented RE easier\", ZeroNights [[slides]](https://github.com/REhints/Publications/blob/master/Conferences/ZeroNights'2013/ZN_2013_pdf.pdf)\n * \"Reconstructing Gapz: Position-Independent Code Analysis Problem\", REcon [[slides]](https://github.com/REhints/Publications/blob/master/Conferences/RECON'2013/RECON_2013.pdf)\n"
  },
  {
    "projectUrl": "https://github.com/argp/iBoot64helper",
    "description": "IDAPython loader to help with AArch64 iBoot, iBEC, and SecureROM reverse engineering",
    "longdescription": "# iBoot64helper\n\n## Introduction\n\n**iBoot64helper** is now an IDA loader!\n\nJust copy *iBoot64helper.py* to your *~/.idapro/loaders/* (or your *IDA/loaders/*)\ndirectory, launch IDA, and open a *decrypted* iBoot, iBEC, or SecureROM binary image.\n\n<p align=\"center\"><img src=\"screenshot-loader.png\"/></p>\n\nThis aims to become an IDAPython utility to help with iBoot and SecureROM reverse\nengineering. Currently it a) locates the image's proper loading address, b) rebases\nthe image, c) identifies functions based on common AArch64 function prologues, and\nd) finds and renames some interesting functions.\n\nAs you can see in the screenshot below, 3154 functions\nare recognized after running it on iBoot version 7459.100.504.0.1.\n\n<p align=\"center\"><img src=\"screenshot.png\"/></p>\n\nI will be adding features to it, identifying more functions, etc.\n\n## IDA support\n\n*iBoot64helper* now supports IDA 7.7 and lower versions (only tested with IDA's\nbuiltin IDAPython for Python 3).\n\n## Decrypting images\n\nFor decrypting images you should use [xerub's img4lib](https://github.com/xerub/img4lib);\nthe ultimate IMG4 utility.\n\n## SecureROM\n\nIf you have a device vulnerable to [axi0mX's checkm8](https://github.com/axi0mX/ipwndfu),\nyou can use ```./ipwndfu --dump-rom``` to get a dump of the SecureROM image from your device\nand use it with *iBoot64helper*.\n\n## References\n* [iOS RE Wiki](https://github.com/kpwn/iOSRE/blob/master/wiki/iBoot-RE.md)\n* [img4lib](https://github.com/xerub/img4lib)\n* [checkm8](https://github.com/axi0mX/ipwndfu)\n"
  },
  {
    "projectUrl": "https://github.com/helloobaby/ida-comment-view",
    "description": "ida comment view list (equal or above 7.5 version)",
    "longdescription": "README.md not found"
  },
  {
    "projectUrl": "https://github.com/tmr232/Sark",
    "description": "IDAPython Made Easy",
    "longdescription": "README.md not found"
  },
  {
    "projectUrl": "https://github.com/gaasedelen/tenet",
    "description": "A Trace Explorer for Reverse Engineers",
    "longdescription": "# Tenet - A Trace Explorer for Reverse Engineers\n\n<p align=\"center\">\n<img alt=\"Tenet Trace Explorer\" src=\"screenshots/tenet_overview.gif\"/>\n</p>\n\n## Overview\n\nTenet is an [IDA Pro](https://www.hex-rays.com/products/ida/) plugin for exploring execution traces. The goal of this plugin is to provide more natural, human controls for navigating execution traces against a given binary. The basis of this work stems from the desire to research new or innovative methods to examine and distill complex execution patterns in software.\n\nFor more context about this project, please read the [blogpost](http://blog.ret2.io/2021/04/20/tenet-trace-explorer/) about its initial release.\n\nSpecial thanks to [QIRA](https://github.com/geohot/qira) / [geohot](https://twitter.com/realGeorgeHotz) et al. for the inspiration.\n\n## Releases\n\n* v0.2 -- Imagebase detection, cell visualization, breakpoint refactor, bugfixes.\n* v0.1 -- Initial release\n\n# Installation\n\nTenet is a cross-platform (Windows, macOS, Linux) Python 3 plugin. It takes zero third party dependencies, making the code both portable and easy to install.\n\n1. From your disassembler's python console, run the following command to find its plugin directory:\n   - **IDA Pro**: `import idaapi, os; os.path.join(idaapi.get_user_idadir(), \"plugins\")`\n\n2. Copy the contents of this repository's `/plugins/` folder to the listed directory.\n3. Restart your disassembler.\n\nThis plugin is only supported for IDA 7.5 and newer.\n\n# Usage\n\nOnce properly installed, there will be a new menu entry available in the disassembler. This can be used to load externally-collected execution traces into Tenet.\n\n<p align=\"center\">\n<img alt=\"Load Tenet trace\" src=\"screenshots/load_trace.gif\"/>\n</p>\n\nAs this is the initial release, Tenet only accepts simple human-readable text traces. Please refer to the [tracing readme](https://github.com/gaasedelen/tenet/tree/master/tracers) in this repository for additional information on the trace format, limitations, and reference tracers.\n\n## Bidirectional Exploration\n\nWhile using Tenet, the plugin will 'paint' trails to indicate the flow of execution forwards (blue) and backwards (red) from your present position in the active execution trace. \n\n<p align=\"center\">\n<img alt=\"Tenet trails\" src=\"screenshots/tenet_trails.gif\"/>\n</p>\n\nTo `step` forwards or backwards through time, you simply *scroll while hovering over the timeline* on the right side of the disassembler. To `step over` function calls, hold `SHIFT` while scrolling. \n\n## Trace Timeline\n\nThe trace timeline will be docked on the right side of the disassembler. This widget is used to visualize different types of events along the trace timeline and perform basic navigation as described above.\n\n<p align=\"center\">\n<img alt=\"Zooming in on the trace timeline\" src=\"screenshots/trace_zoom.gif\"/>\n</p>\n\nBy *clicking and dragging across the timeline*, it is possible to zoom in on a specific section of the execution trace. This action can be repeated any number of times to reach the desired granularity. \n\n## Execution Breakpoints\n\nDouble clicking the instruction pointer in the registers window will highlight it in red, revealing all the locations the instruction was executed across the trace timeline.\n\n<p align=\"center\">\n<img alt=\"Placing a breakpoint on the current instruction\" src=\"screenshots/trace_breakpoints.gif\"/>\n</p>\n\nTo jump between executions, *scroll up or down while hovering the highlighted instruction pointer*.\n\nAdditionally, you can *right click in the disassembly listing* and select one of the navigation-based menu entries to quickly seek to the execution of an instruction of interest. \n\n<p align=\"center\">\n<img alt=\"Seeking to the first execution of an instruction\" src=\"screenshots/seek_to_first.gif\"/>\n</p>\n\nIDA's native `F2` hotkey can also be used to set breakpoints on arbitrary instructions. \n\n## Memory Breakpoints\n\nBy double clicking a byte in either the stack or memory views, you will instantly see all reads/writes to that address visualized across the trace timeline. Yellow indicates a memory *read*, blue indicates a memory *write*.\n\n<p align=\"center\">\n<img alt=\"Exploring memory accesses using memory breakpoints\" src=\"screenshots/memory_breakpoint.gif\"/>\n</p>\n\nMemory breakpoints can be navigated using the same technique described for execution breakpoints. Double click a byte, and *scroll while hovering the selected **byte*** to seek the trace to each of its accesses.\n\n*Right clicking a byte* of interest will give you options to seek between memory read / write / access if there is a specific navigation action that you have in mind.\n\n<p align=\"center\">\n<img alt=\"Memory seeking\" src=\"screenshots/memory_seek.png\"/>\n</p>\n\nTo navigate the memory view to an arbitrary address, click onto the memory view and hit `G` to enter either an address or database symbol to seek the view to. \n\n## Region Breakpoints\n\nIt is possible to set a memory breakpoint across a region of memory by highlighting a block of memory, and double clicking it to set an access breakpoint.\n\n<p align=\"center\">\n<img alt=\"Memory region access breakpoints\" src=\"screenshots/region_breakpoints.gif\"/>\n</p>\n\nAs with normal memory breakpoints, hovering the region and *scrolling* can used to traverse between the accesses made to the selected region of memory. \n\n## Register Seeking\n\nIn reverse engineering, it's pretty common to encounter situations where you ask yourself *\"Which instruction set this register to its current value?\"* \n\nUsing Tenet, you can seek backwards to that instruction in a single click. \n\n<p align=\"center\">\n<img alt=\"Seeking to the previous register write\" src=\"screenshots/seek_to_register.gif\"/>\n</p>\n\nSeeking backwards is by far the most common direction to navigate across register changes... but for dexterity you can also seek forward to the next register assignment using the blue arrow on the right of the register.\n\n## Timestamp Shell\n\nA simple 'shell' is provided to navigate to specific timestamps in the trace. Pasting (or typing...) a timestamp into the shell with or without commas will suffice. \n\n<p align=\"center\">\n<img alt=\"Seeking around the trace using the timestamp shell\" src=\"screenshots/idx_shell.gif\"/>\n</p>\n\nUsing an exclamation point, you can also seek a specified 'percentage' into the trace. Entering `!100` will seek to the final instruction in the trace, where `!50` will seek approximately 50% of the way through the trace. `!last` will seek to the last navigable instruction that can be viewed in the disassembler.\n\n## Themes\n\nTenet ships with two default themes -- a 'light' theme, and a 'dark' one. Depending on the colors currently used by your disassembler, Tenet will attempt to select the theme that seems most appropriate.\n\n<p align=\"center\">\n<img alt=\"Tenet Themes\" src=\"screenshots/themes.png\"/>\n</p>\n\nThe theme files are stored as simple JSON on disk and are highly configurable. If you are not happy with the default themes or colors, you can create your own themes and simply drop them in the user theme directory.\n\nTenet will remember your theme preference for future loads and uses.\n\n# FAQ\n\n#### Q: How do I record an execution trace using Tenet?\n\n* *A: Tenet is a trace reader, not a trace recorder. You will have to use dynamic binary instrumentation frameworks (or other related technologies) to generate a compatible execution trace. Please refer to the [tracing](https://github.com/gaasedelen/tenet/tree/master/tracers) readme for more information on existing tracers, or how to implement your own.*\n\n#### Q: What trace architectures does Tenet support loading?\n\n* *A: Only x86 and AMD64, but the codebase is almost entirely architecture agnostic.*\n\n#### Q: How big of a trace file can Tenet load / navigate?\n\n* *A: Tenet's trace reader is pure python, it was written as an MVP. There is no guarantee that traces which exceed 10 million instructions will be reasonable to navigate until a native backend replaces it.*\n\n#### Q: I loaded an execution trace, now there is a '.tt' file. What is it?\n\n* *A: When Tenet loads a given text trace, it will parse, index, and compress the trace into a more performant format. On subsequent loads, Tenet will attempt to load the '.tt' file which should load in fraction of the time that it would take to load the original text trace.*\n\n#### Q: The plugin crashed / threw an error / is showing bad trace information, what should I do?\n\n* *A: If you encounter an issue or inaccuracy that can be reproduced, please file an issue against this repository and upload a sample trace + executable.*\n\n#### Q: Memory in my trace is changing, but there are no writes to the region. Is this a bug!?\n\n* *A: Your log file may not have captured all memory writes. For example, usermode DBI generally do not get a memory callback for external writes to process memory. This is most common when reading from a file, or from socket -- it is the kernel that writes memory into your designated usermode buffer, making the event invisible to traditional instrumentation.*\n\t* Microsoft TTD generally exhibits the same behavior, it's tricky to solve without modeling syscalls. \n\n#### Q: Will this be ported to Binary Ninja / Ghidra / ... ? \n\n* *A: Possibly, but not anytime soon (unless there is __significant__ incentive). As a research oriented project, the driving motivation is on developing novel strategies to organize and explore program execution -- not porting them.*\n\n#### Q: My organization would like to support this project, how can we help?\n\n* *A: Without funding, the time I can devote to this project is limited. If your organization is excited by the ideas put forth here and capable of providing capital to sponsor dedicated R&D, please [contact us](https://ret2.io/contact).*\n\n# Future Work\n\nTime and ~~motivation~~ funding permitting, future work may include:\n\n* Filtering / coagulating library calls from traces\n* Pointer analysis (e.g. annotations) for the register / stack views\n* Native TraceFile & TraceReader implementations (e.g. bigger and faster traces)\n* Navigation history + bookmarks view (maybe 2-in-1?)\n* Richer trace informatics, more aggressive indexing of relevant events (e.g. function calls)\n* Trace cartography, improved summarization and representation of trace geography\n* Make the 'cpu architecture' selection/detection slightly less hardcoded\n* More out-of-the-box tracing bridges, DynamoRIO, TTD, RR, QEMU, Bochs, ...\n* Support for Hex-Rays / decompiled views (besides basic view sync) \n* Improved workflow for automatically loading or iterating on traces\n* Differential analysis, high level 'trace diffing'\n* Better navigation and breakdown of threads, quantum's\n* Better support for navigating 'multi module' traces (e.g. full system traces)\n* Binary Ninja support\n* ... ?\n\nI welcome external contributions, issues, and feature requests. Please make any pull requests to the `develop` branch of this repository if you would like them to be considered for a future release.\n\n# Authors\n\n* Markus Gaasedelen ([@gaasedelen](https://twitter.com/gaasedelen))\n"
  },
  {
    "projectUrl": "https://github.com/arizvisa/ida-minsc",
    "description": "A plugin based on IDAPython for a functional DWIM interface. Current development against most recent IDA is in the \"persistence-refactor\" branch, ancient (but stable) work is in \"master\", so... create an issue if you want/need something backported. Use \"Wiki\" or \"Discussions\" for examples, and smash that \"Star\" button if you like this.",
    "longdescription": "# IDA-minsc\n\n<table>\n    <tr>\n        <td width=\"10%\">\n            <img src=\"http://arizvisa.github.io/ida-minsc/_images/hamster.svg\" height=\"10%\" />\n        </td>\n        <td>\n            <ul>\n                <li>Website: https://github.com/arizvisa/ida-minsc</li>\n                <li>Documentation: https://arizvisa.github.io/ida-minsc</li>\n                <li>Mantras: https://github.com/arizvisa/ida-minsc/wiki/Mantras</li>\n                <li>Wiki: https://github.com/arizvisa/ida-minsc/wiki</li>\n                <li>Changelog: https://github.com/arizvisa/ida-minsc/wiki/Changelog</li>\n                <li>IRC: <code>#eof</code> on <a href=\"http://chat.efnet.org:9090/?nick=user-.&channels=eof&prompt=1\">EFnet</a></li>\n            </ul>\n        </td>\n    </tr>\n</table>\n\n## General\n\nIDA-minsc is a plugin for IDA Pro that assists a user with scripting the\nIDAPython plugin that is bundled with the disassembler. This plugin groups the\ndifferent aspects of the IDAPython API into a simpler format which allows a\nreverse engineer to script different aspects of their work with very little\ninvestment.\n\nA number of concepts are introduced such as a tagging system, support for\nmulticased functions, and filtering with the intention that most search\nand annotation issues can be performed with just a few lines of code. This\nshould enable a user to write quick, hacky, temporary code that can be used\nto augment their reversing endeavors without distraction.\n\n## Installation\n\nInstallation should be pretty simple and requires simply cloning the repository\ndirectly into the user's IDA user directory. On the Windows platform, this is\ntypically located at `%APPDATA%/Hex-Rays/IDA Pro`. Whereas on the Linux\nplatform this can be found at `$HOME/.idapro`. This contents of this repository\nshould actually replace that directory. If you have any files that presently\nreside there, simply move them into the repository's directory. After\ninstallation, IDA Pro should load its IDAPython plugin which should result in\nthe `idapythonrc.py` belonging to IDA-minsc being executed which will then\nreplace IDAPython's default namespace with the one belonging to the plugin's.\n\nTo clone the repository in a directory `$TARGET`, one can simply do:\n\n    $ git clone https://github.com/arizvisa/ida-minsc \"$TARGET\"\n\nAfter cloning the repository, the user will need to install its required Python\ndependencies into their site-packages. This can be done using `pip` which is a\ntool that is bundled with Python. The file that contains the user's requirements\nis in the root of the repository as `requirements.txt`.\n\nTo install the required Python dependencies, one can run `pip` as so:\n\n    $ pip install -r \"requirements.txt\"\n\nAt this point when the user starts IDA Pro, IDA-minsc will replace IDAPython's\nnamespace with its own at which point can be used immediately. To verify that\nIDA-minsc was installed properly, one can simply type in the following at the\nIDAPython prompt:\n\n    > database.config.version()\n\nThis should then return the number `0` since no database has been loaded.\n\n## Quick Start\n\nAfter installing the python dependencies, you can do something like the\nfollowing to list all the functions in your database:\n\n    > database.functions.list()\n\nOr to iterate through all the functions in the database, you can try:\n\n    > for ea in database.functions():\n          print(hex(ea))\n\nPlease refer to the documentation for more details on what this plugin makes\navailable to you.\n\n## Documentation\n\nComprehensive documentation is available at the project page on\n[github.io](https://arizvisa.github.io/ida-minsc), or can be built locally via\nthe \"[docs](https://github.com/arizvisa/ida-minsc/tree/docs)\" branch.\n\nIf the user wishes to build documentation for local use, they will first need\nto install the [Sphinx](http://www.sphinx-doc.org/en/master/usage/installation.html)\npackage. Afterwards, the entirety of the documentation resides within in the\n\"[docs](https://github.com/arizvisa/ida-minsc/tree/docs)\" branch. Simply\ncheckout the branch, change the directory to \"docs\", and then run GNU make as:\n\n    $ make html\n\nThis will result in the build system parsing the available modules and then\nrendering all of the documentation into the `_build` directory relative to the\n`docs/Makefile`. Documentation can be generated for a number of different\nformats. To list all of the available formats, type in `make help` at the\ncommand prompt.\n\n## Contributing\n\nSee [CONTRIBUTING.md](https://github.com/arizvisa/ida-minsc/blob/master/CONTRIBUTING.md)\nfor best practices on reporting issues or for adding functionality to this\nproject.\n\n## Thanks\n\nThanks to a number of anonymous and non-anonymous people whom have helped with\nthe development of this plugin over all of these years.\n\n[logo]: http://arizvisa.github.io/ida-minsc/_images/hamster.svg\n"
  }
]
